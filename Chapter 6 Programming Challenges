#define _USE_MATH_DEFINES
#include <iostream>
#include <iomanip>
#include <math.h>
#include <cmath>
#include <cstring>
#include <string>
#include <random>
#include <algorithm>
#include <fstream>
using namespace std;


const double gravity = 9.8;

float calculateRetail(float cost, float markup)
{
    float retailPrice;
    retailPrice = (cost * (markup)) / 100;
    return retailPrice;
}

double getLength()
{
    double length;
    cout << "Enter length value: ";
    cin >> length;
    return length;
}

double getWidth()
{
    double width;
    cout << "Enter width value: ";
    cin >> width;
    return width;
}

double getArea(double l, double w)
{
    double area = l * w;
    return area;
}

void displayData(double l, double w, double a)
{
    cout << "Length: " << l << " centimeters.\n";
    cout << "Width: " << w << " centimeters.\n";
    cout << "Area: " << a << " centimeters square.\n";
}

double getSales()
{
    double sales;
    cout << "What is the quarterly sales figure: ";
    while (cin >> sales && sales < 0)
        cout << "No less than 0. Enter again: ";
    return sales;
}

void findHighest(double sales1, double sales2, double sales3, double sales4)
{
    double highest;
    if (sales1 > sales2 && sales1 > sales3 && sales1 > sales4) {
        highest = sales1;
        cout << "Northeast Division has the highest sales with total of $" << highest << endl;
    }
    else if (sales2 > sales1 && sales2 > sales3 && sales2 > sales4) {
        highest = sales2;
        cout << "Southeast Division has the highest sales with total of $" << highest << endl;
    }
    else if (sales3 > sales1 && sales3 > sales2 && sales3 > sales4) {
        highest = sales3;
        cout << "Northwest Division has the highest sales with total of $" << highest << endl;
    }
    else {
        highest = sales4;
        cout << "Southwest Division has the highest sales with total of $" << highest << endl;
    }
}

int getNumAccident()
{
    int numAccidents;
    cout << "\nEnter the number of automobile accidents: ";
    while (cin >> numAccidents && numAccidents < 0)
        cout << "no less than 0.\n";
    return numAccidents;
}

void findLowest(int act1, int act2, int act3, int act4, int act5, string* array)
{

    int i = 0;
    int smallest;
    if (act1 < act2 && act1 < act3 && act1 < act4 && act1 < act5) {
        smallest = act1; i = 0;
    }
    else if (act2 < act1 && act2 < act3 && act2 < act4 && act2 < act5) {
        smallest = act2; i = 1;
    }
    else if (act3 < act1 && act3 < act2 && act3 < act4 && act3 < act5) {
        smallest = act3; i = 2;
    }
    else if (act4 < act1 && act4 < act2 && act4 < act3 && act4 < act5) {
        smallest = act4; i = 3;
    }
    else if (act5 < act1 && act5 < act2 && act5 < act3 && act5 < act4) {
        smallest = act5; i = 4;
    }
    cout << "\n" << array[i] << " region has the smallest amount of accidents of " << smallest << " times.\n";
}

double fallingDistance(double time)
{
    double distance;
    distance = 0.5 * gravity * time * time;
    return distance;
}

double kineticEnery(double mass, double velocity)
{
    int K;
    K = 0.5 * mass * velocity * velocity;
    return K;

}

double Celsius(double Farenheit)
{
    double cel;
    cel = (5 * (Farenheit - 32))/9;
    return cel;
}

void coinToss(int numTimes)
{
    const int MIN = 1, MAX = 2;
    unsigned int seed = time(0);
    srand(seed);
   
    for (int i = 0; i < numTimes; i++) {
        int random = MIN + (rand() % (MAX - MIN + 1));
        if (random == 1)
            cout << "heads.\n";
        else if (random == 2)
            cout << "tails.\n";
    }
}

float presentValue(float futureValue, float annualInterest, int numYears)
{
    float presentValue;

    presentValue = futureValue / pow((1 + (annualInterest / 100.0)), numYears);
    return presentValue;

}

void futureValue(float accVal, float monthlyRate, int numMonth)
{
    float futureValue;
    futureValue = accVal * pow((1 + (monthlyRate / 100.0)), numMonth);
    cout << "Future value is $" << futureValue << endl;
}

void getScore(float& score)
{
    cout << "Enter score: ";
    while (cin >> score && score < 0)
        cout << " No value less than 0. Enter again.\n";
}

float findLowest(float sc1, float sc2, float sc3, float sc4, float sc5)
{
    float lowest;
    if (sc1 < sc2 && sc1 < sc3 && sc1 < sc4 && sc1 < sc5)
        lowest = sc1;
    else if (sc2 < sc1 && sc2 < sc3 && sc2 < sc4 && sc2 < sc5)
        lowest = sc2;
    else if (sc3 < sc1 && sc3 < sc2 && sc3 < sc4 && sc3 < sc5)
        lowest = sc3;
    else if (sc4 < sc1 && sc4 < sc2 && sc4 < sc3 && sc4 < sc5)
        lowest = sc4;
    else
        lowest = sc5;
    cout << "Lowest value is " << lowest << endl;
    return lowest;
}

void calcAverage(float sc1, float sc2, float sc3, float sc4, float sc5)
{
   
    float total = sc1 + sc2 + sc3 + sc4 + sc5;
    float lowest = findLowest(sc1, sc2, sc3, sc4, sc5);
    float average = (total - lowest ) / 4.0;  // we take the lowest out already so we divide by 4

    cout << "The average test scores is " << average << endl;
}

float findHighest(float sc1, float sc2, float sc3, float sc4, float sc5)
{
    float highest;
    if (sc1 > sc2 && sc1 > sc3 && sc1 > sc4 && sc1 > sc5)
        highest = sc1;
    else if (sc2 > sc1 && sc2 > sc3 && sc2 > sc4 && sc2 > sc5)
        highest = sc2;
    else if (sc3 > sc1 && sc3 > sc2 && sc3 > sc4 && sc3 > sc5)
        highest = sc3;
    else if (sc4 > sc1 && sc4 > sc2 && sc4 > sc3 && sc4 > sc5)
        highest = sc4;
    else
        highest = sc5;
    cout << "Highest value is " << highest << endl;
    return highest;
}

void getJudgeScore(float& score)
{
    cout << "Enter the score: ";
    while (cin >> score && (score < 0 || score > 10))
        cout << "Score couldnt not be less than 0 or greater than 10.\n";
}

void calScore(float sc1, float sc2, float sc3, float sc4, float sc5)
{
    float highest = findHighest(sc1, sc2, sc3, sc4, sc5);
    float lowest = findLowest(sc1, sc2, sc3, sc4, sc5);
    float total = sc1 + sc2 + sc3 + sc4 + sc5;
    float average = (total - highest - lowest)/3.0;
    cout << setprecision(2) << fixed << showpoint();
    cout << "The average score from judges is " << average << endl;
}

int numEmployee()
{
    int numEmploy;
    cout << "How many employee in the company? ";
    while (cin >> numEmploy && numEmploy < 1)
        cout << "Employee cant be less than 1.";
    return numEmploy;
}

int totalMissedDay(int numEmployee)
{
    int totalDays = 0;
    int temp;
    for (int i = 0; i < numEmployee; i++)
    {
        cout << "Employee " << i + 1 << "'s missed days: ";
        cin >> temp;
        totalDays += temp;
    }
    return totalDays;
}

double averageAbsentDay(int numEmp, int numMissed)
{
    double average = double(numMissed) / numEmp;
    return average;
}

void getInfo(int& amount, int& stock, double& charge)
{
    char choice;

    cout << "The number of spools ordered: ";
    cin >> amount;
    cout << "Number of spools in stock: ";
    cin >> stock;
    cout << "Is there any special charges per spool? (y/n)\n";
    cin >> choice;
    if (choice == 'y' || choice == 'Y') {
        cout << "Charges: ";
        cin >> charge;
    }
    else
        return;
    
}

void display(int order, int stock, double charge)
{
    int shipAmount;

    if (order > stock)
    {
        cout << "The backorder of spools are " << order - stock << endl;
        shipAmount = stock;
    }
    else
    {
        cout << "Amount ready to ship from the stock are " << order << endl;
        shipAmount = order;
    }

    double subtotal = shipAmount * 100;
    double ship_n_handling = shipAmount * charge;

    cout << "Subtotal of the portion ready to ship: $" << subtotal<< endl;
    cout << "Total shipping and handling charges: $" << ship_n_handling << endl;
    cout << "Total price: $" << subtotal + ship_n_handling << endl;
}

float calCharges(int days, float rate, float med, float service)
{
    float totalCharge;
    totalCharge = (days * rate) + med + service;
    return totalCharge;
}

float calCharges(float service, float med)
{
    float totalCharge = service + med;
    return totalCharge;
}

int sizePopulation(int prevSize, int birthRate, int deathRate)
{
    int newPopSize = prevSize + birthRate - deathRate;
    return newPopSize;
}

int sizePopulation(int prevSize, int birthRate, int deathRate, int in, int out)
{
    int newPopSize = prevSize + birthRate - deathRate + in - out;
    return newPopSize;
}

void info(float paintPrice, float squareFeet, int numRoom, const float laborQuote, const float roomSize)
{
    
    float paintGallon = (squareFeet / roomSize)*numRoom;
    float laborHours = ((squareFeet * 8) / roomSize)*numRoom;
    float totalPaintCost = paintPrice * paintGallon;
    float laborCharge = laborHours * laborQuote;
    
    cout << setprecision(2) << fixed << showpoint;
    cout << "The amount of paint required: " << paintGallon << " gallons\n";
    cout << "The hours of labor required: " << laborHours << " hours\n";
    cout << "The cost of the paint: $" << totalPaintCost << endl;
    cout << "The labor charges: $" << laborCharge << endl;
    cout << "The total cost of the paint job: $" << laborCharge + totalPaintCost << endl;
}

void storeInfo(ofstream& file, int d, float r, float md, float sv, float t)
{
    if(!file.good()){
        cout << "fail to open the file";
        exit(EXIT_FAILURE);
    }
    else{
        file << "In-Patient\n"
        << "Days spent in hospital: " << d
        << "\nDaily rate: " << r
        << "\nMedication charges: " << md
        << "\nService charges: " << sv
        << "\nTotal charges: " << t << endl;
    }
}

void storeInfo2(ofstream& file, float sv, float mc, float t)
{
    if(!file.good()){
        cout << "fail to open the file";
        exit(EXIT_FAILURE);
    }
    else{
        file << "Out-Patient\n"
        << "\nMedication charges: " << mc
        << "\nService charges: " << sv
        << "\nTotal charges: " << t << endl;
    }
}

float calProfit(int NS, float SP, float SC, float PP, float PC)
{
    float profit;
    profit = ((NS*SP)-SC)-((NS*PP)+PC);
    return profit;
}

void isPrime(int num)
{
    bool check = true;
    if(num == 0 || num == 1)
        cout << num << " is not a prime number.\n";
    
    for(int i = 2; i < num; i++)
    {
        if(num % i == 0){
            cout << num << " is not a prime number.\n";
            check = false;
            break;
        }
        
    }
    if(check)
        cout << num << " is a prime number.\n";
}

void isPrime(ofstream& file, int num)
{
    bool check = true;
    if(num == 0 || num == 1){
        cout << num << " is not a prime number.\n";
        check = false;
    }
    
    for(int i = 2; i < num; i++)
    {
        if(num % i == 0){
            cout << num << " is not a prime number.\n";
            check = false;
            break;
        }
        
    }
    if(check){
        cout << "Prime number list from 1-100.\n";
        file << num << endl;
    }
}

int main()
{

1. Markup
   Write a program that asks the user to enter an item’s wholesale cost and its markup
   percentage.It should then display the item’s retail price.For example :
   • If an item’s wholesale cost is 5.00 and its markup percentage is 100 %, then the
     item’s retail price is 10.00.
   • If an item’s wholesale cost is 5.00 and its markup percentage is 50%, then the item’s
     retail price is 7.50.
The program should have a function named calculateRetail that receives the
wholesale cost and the markup percentage as arguments and returns the retail price
of the item.
Input Validation: Do not accept negative values for either the wholesale cost of the
item or the markup percentage.
    

    float wholeSale, markUp;
    cout << "Wholesale cost: ";
    while (cin >> wholeSale && wholeSale < 0)
        cout << "No negative value. Re-enter";
    cout << "Mark up cost: ";
    while (cin >> markUp && markUp < 0)
        cout << "No negative value. Re-enter";

    cout << setprecision(2) << fixed << showpoint;
    cout << "The retail price is: $" << wholeSale + calculateRetail(wholeSale, markUp);
   

  
2. Rectangle Area—Complete the Program
If you have downloaded this book’s source code from the companion Web site, you
will find a partially written program named AreaRectangle.cpp in the Chapter 06
folder. (The companion Web site is at www.pearsonhighered.com / gaddis .) Your job is
to complete the program. When it is complete, the program will ask the user to enter
the width and length of a rectangle and then display the rectangle’s area.The program
calls the following functions, which have not been written :
• getLength – This function should ask the user to enter the rectangle’s length and
then return that value as a double .
• getWidth – This function should ask the user to enter the rectangle’s width and then
return that value as a double .
• getArea – This function should accept the rectangle’s length and width as arguments
and return the rectangle’s area.The area is calculated by multiplying the
length by the width.
• displayData – This function should accept the rectangle’s length, width, and area
as arguments and display them in an appropriate message on the screen.   
    

    double length = getLength();
    double width = getWidth();
    double area = getArea(length, width);

    displayData(length, width, area);

 
3. Winning Division
Write a program that determines which of a company’s four divisions(Northeast,
Southeast, Northwest, and Southwest) had the greatest sales for a quarter.It should
include the following two functions, which are called by main .
• double getSales() is passed the name of a division.It asks the user for a division’s
quarterly sales figure, validates the input, then returns it.It should be called once for
each division.
• void findHighest() is passed the four sales totals.It determines which is the largest
and prints the name of the high grossing division, along with its sales figure.
Input Validation : Do not accept dollar amounts less than $0.00.
    
    double sales1, sales2, sales3, sales4;
  
    cout << "Northeast Division\n";
    sales1 = getSales();
    cout << "Southeast Division\n";
    sales2 = getSales();
    cout << "Northwest Division\n";
    sales3 = getSales();
    cout << "Southwest Division\n";
    sales4 = getSales();

    findHighest(sales1, sales2, sales3, sales4);
    

4. Safest Driving Area
Write a program that determines which of five geographic regions within a major city
(north, south, east, west, and central) had the fewest reported automobile accidents last
year.It should have the following two functions, which are called by main .
• int getNumAccidents() is passed the name of a region.It asks the user for the
number of automobile accidents reported in that region during the last year, validates
the input, then returns it.It should be called once for each city region.
• void findLowest() is passed the five accident totals.It determines which is the
smallest and prints the name of the region, along with its accident figure.
Input Validation : Do not accept an accident number that is less than 0.


    string region[5] = { "north", "south", "east", "west", "central" };
    int act[5];

    for (int i = 0; i < 5; i++) {
        cout << "------" << region[i] << "------";
        act[i] = getNumAccident();
    }

    findLowest(act[0], act[1], act[2], act[3], act[4], region);
 
5. Falling Distance
When an object is falling because of gravity, the following formula can be used to
determine the distance the object falls in a specific time period :
d = 1/2(gt^2)
The variables in the formula are as follows : d is the distance in meters, g is 9.8, and t
is the amount of time, in seconds, that the object has been falling.
Write a function named fallingDistance that accepts an object’s falling time(in
seconds) as an argument.The function should return the distance, in meters, that the
object has fallen during that time interval. Write a program that demonstrates the
function by calling it in a loop that passes the values 1 through 10 as arguments and
displays the return value.
 


    for (int i = 1; i <= 10; i++)
    {
        if (i == 1)
        {
            cout << i << " second : " << fallingDistance(i) << " meters.\n";
        }
        else {
            cout << i << " seconds : " << fallingDistance(i) << " meters\n";
        }
    }
   
6. Kinetic Energy
In physics, an object that is in motion is said to have kinetic energy.The following
formula can be used to determine a moving object’s kinetic energy :
KE = 1/2(mv^2)
The variables in the formula are as follows : KE is the kinetic energy, m is the object’s
mass in kilograms, and v is the object’s velocity, in meters per second.
Write a function named kineticEnergy that accepts an object’s mass(in kilograms)
and velocity(in meters per second) as arguments.The function should return the
amount of kinetic energy that the object has.Demonstrate the function by calling it in
a program that asks the user to enter values for mass and velocity.


    double mass, velocity;

    cout << "Enter the mass (kg): ";
    cin >> mass;
    cout << "Enter the velocity (m/s): ";
    cin >> velocity;

    cout << "The kinetic energy is: " << kineticEnery(mass, velocity) << " joules.\n";

7. Celsius Temperature Table
The formula for converting a temperature from Fahrenheit to Celsius in
C = 5/9(F-32)
where F is the Fahrenheit temperature and C is the Celsius temperature. Write a function
named celsius that accepts a Fahrenheit temperature as an argument.The function
should return the temperature, converted to Celsius.Demonstrate the function by
calling it in a loop that displays a table of the Fahrenheit temperatures 0 through 20
and their Celsius equivalents.

    double faren, cel;

    cout << "Enter the Farenheit degree and we will convert it into Celsius\n";
    cin >> faren;

    cel = Celsius(faren);

    cout << faren << "F\370 = " << cel << "C\370";
  
8. Coin Toss
Write a function named coinToss that simulates the tossing of a coin.When you call
the function, it should generate a random number in the range of 1 through 2. If the
random number is 1, the function should display “heads.” If the random number is 2,
the function should display “tails.” Demonstrate the function in a program that asks
the user how many times the coin should be tossed and then simulates the tossing of
the coin that number of times.
   
    coinToss(5);

9. Present Value
    Suppose you want to deposit a certain amount of money into a savings account and
    then leave it alone to draw interest for the next 10 years.At the end of 10 years you
    would like to have $10,000 in the account. How much do you need to deposit today to make 
    that happen? You can use the following formula, which is known as the present
    value formula, to find out :
        P = F /(1+r)^n
    The terms in the formula are as follows :
    • P is the present value, or the amount that you need to deposit today.
    • F is the future value that you want in the account. (In this case, F is $10,000.)
    • r is the annual interest rate .
    • n is the number of years that you plan to let the money sit in the account.
    Write a program that has a function named presentValue that performs this calculation.
    The function should accept the future value, annual interest rate, and number of
    years as arguments.It should return the present value, which is the amount that you
    need to deposit today. Demonstrate the function in a program that lets the user experiment
    with different values for the formula’s terms.
    

        float presentVal, futureVal, annualRate, numYears;
        cout << "Expected future value amount\n";
        cin >> futureVal;

        cout << "Annual interest rate\n";
        cin >> annualRate;

        cout << "Number of years\n";
        cin >> numYears;

        presentVal = presentValue(futureVal, annualRate, numYears);
        cout << "In order to get $" << futureVal << " you must put $" << presentVal << " in bank now.\n";

10. Future Value
    Suppose you have a certain amount of money in a savings account that earns compound
    monthly interest, and you want to calculate the amount that you will have after a specific
    number of months.The formula, which is known as the future value formula, is:
    F = P x (1+i)^t
    The terms in the formula are as follows :
    • F is the future value of the account after the specified time period.
    • P is the present value of the account.
    • i is the monthly interest rate .
    • t is the number of months .
    Write a program that prompts the user to enter the account’s present value, monthly
    interest rate, and the number of months that the money will be left in the account.The
    program should pass these values to a function named futureValue that returns the
    future value of the account, after the specified number of months.The program should
    display the account’s future value.

          float accValue, monthlyRate; int numMonth;
          cout << "Enter current account value: $";
          cin >> accValue;

          cout << "Montly interest rate: ";
          cin >> monthlyRate;

          cout << "Number of months money will be left in: ";
          cin >> numMonth;

          futureValue(accValue, monthlyRate, numMonth);

11. Lowest Score Drop
Write a program that calculates the average of a group of test scores, where the lowest
score in the group is dropped.It should use the following functions :
• void getScore() should ask the user for a test score, store it in a reference parameter
variable, and validate it.This function should be called by main once for each
of the five scores to be entered.
• void calcAverage() should calculate and display the average of the four highest
scores.This function should be called just once by main and should be passed the
five scores.
• int findLowest() should find and return the lowest of the five scores passed to it.
It should be called by calcAverage, which uses the function to determine which of
the five scores to drop.
Input Validation : Do not accept test scores lower than 0 or higher than 100.


          const int numTest = 5;
          float score1, score2, score3, score4, score5;

          getScore(score1);
          getScore(score2);
          getScore(score3);
          getScore(score4);
          getScore(score5);

          calcAverage(score1, score2, score3, score4, score5);

12. Star Search
A particular talent competition has five judges, each of whom awards a score between
0 and 10 to each performer.Fractional scores, such as 8.3, are allowed.A performer’s
final score is determined by dropping the highestand lowest score received, then averaging
the three remaining scores.Write a program that uses this method to calculate a
contestant’s score.It should include the following functions :
• void getJudgeData() should ask the user for a judge’s score, store it in a reference
parameter variable, and validate it.This function should be called by main once for
each of the five judges.
• void calcScore() should calculateand display the average of the three scores that
remain after dropping the highestand lowest scores the performer received.This
function should be called just once by mainand should be passed the five scores.
The last two functions, described below, should be called by calcScore, which uses
the returned information to determine which of the scores to drop.
• int findLowest() should findand return the lowest of the five scores passed to it.
• int findHighest() should find and return the highest of the five scores passed to it.
Input Validation : Do not accept judge scores lower than 0 or higher than 10.

    float score1, score2, score3, score4, score5;
    getJudgeScore(score1);
    getJudgeScore(score2);
    getJudgeScore(score3);
    getJudgeScore(score4); 
    getJudgeScore(score5);
    calScore(score1, score2, score3, score4, score5);
    
13. Days Out
Write a program that calculates the average number of days a company’s employees
are absent. The program should have the following functions:
• A function called by main that asks the user for the number of employees in
the company. This value should be returned as an int . (The function accepts no
arguments.)
• A function called by main that accepts one argument: the number of employees in
the company. The function should ask the user to enter the number of days each
employee missed during the past year. The total of these days should be returned as
an int .
• A function called by main that takes two arguments: the number of employees in
the company and the total number of days absent for all employees during the year.
The function should return, as a double , the average number of days absent. (This
function does not perform screen output and does not ask the user for input.)
Input Validation: Do not accept a number less than 1 for the number of employees. Do
not accept a negative number for the days any employee missed.

    int num, totalDays;
    double absentAverage;

    num = numEmployee();
    totalDays =  totalMissedDay(num);
    absentAverage = averageAbsentDay(num, totalDays);

    cout << "\nEmployees: " << num << endl;
    cout << "Total absents: " << totalDays << " days\n";
    cout << "The average absent days of employee is : " << absentAverage << " days.\n";
    
    
14. Order Status
The Middletown Wholesale Copper Wire Company sells spools of copper wiring for
$100 each. Write a program that displays the status of an order. The program should
have a function that asks for the following data:
• The number of spools ordered.
• The number of spools in stock.
• Whether there are special shipping and handling charges.
(Shipping and handling is normally $10 per spool.) If there are special charges, the
program should ask for the special charges per spool.
The gathered data should be passed as arguments to another function that displays
• The number of spools ready to ship from current stock.
• The number of spools on backorder (if the number ordered is greater than what is
in stock).
• Subtotal of the portion ready to ship (the number of spools ready to ship times
$100).
• Total shipping and handling charges on the portion ready to ship.
• Total of the order ready to ship.
The shipping and handling parameter in the second function should have the default
argument 10.00.
Input Validation: Do not accept numbers less than 1 for spools ordered. Do not accept
a number less than 0 for spools in stock or shipping and handling charges.

    int orderAmount, stockAmount;
    double charge = 10;

    getInfo(orderAmount, stockAmount, charge);

    display(orderAmount, stockAmount, charge);

15. Overloaded Hospital
Write a program that computes and displays the charges for a patient’s hospital stay.
First, the program should ask if the patient was admitted as an in-patient or an outpatient.
If the patient was an in-patient, the following data should be entered:
• The number of days spent in the hospital
• The daily rate
• Hospital medication charges
• Charges for hospital services (lab tests, etc.)
The program should ask for the following data if the patient was an out-patient:
• Charges for hospital services (lab tests, etc.)
• Hospital medication charges
The program should use two overloaded functions to calculate the total charges. One
of the functions should accept arguments for the in-patient data, while the other function
accepts arguments for out-patient information. Both functions should return the
total charges.
Input Validation: Do not accept negative numbers for any data.

    char choice;
    cout << "Is the patient in or out-patient? ('i'/'o')\n";
    while (cin >> choice && (tolower(choice) != 'i' && tolower(choice) != 'o'))
        cout << "Input should be 'i' or 'o'. Enter again: ";

    int days;
    float rate, medCharges, serviceCharges, totalCharges;

    if (choice == 'i')
    {
        cout << "Days spent in hospital: ";
        cin >> days;
        cout << "Daily rate: ";
        cin >> rate;
        cout << "Medication charges: $";
        cin >> medCharges;
        cout << "Hospital services charge: $";
        cin >> serviceCharges;
        cout << "Total charges for the patient's stay in hospital is $ " << calCharges(days, rate, medCharges, serviceCharges);
    }
    else
    {
        cout << "Hospital services charge: $";
        cin >> serviceCharges;
        cout << "Medication charges: $";
        cin >> medCharges;
        cout << "Total charges for the patient's stay in hospital is $ " << calCharges(serviceCharges, medCharges);
    }

16. Population
In a population, the birth rate is the percentage increase of the population due to births,
and the death rate is the percentage decrease of the population due to deaths. Write a
program that displays the size of a population for any number of years. The program
should ask for the following data:
• The starting size of a population
• The annual birth rate
• The annual death rate
• The number of years to display
Write a function that calculates the size of the population for a year. The formula is
N = P + BP − DP
where N is the new population size, P is the previous population size, B is the birth rate,
and D is the death rate.

Input Validation: Do not accept numbers less than 2 for the starting size. Do not accept
negative numbers for birth rate or death rate. Do not accept numbers less than 1 for
the number of years.

    int popSize, birthRate, deathRate, numYears;
    
    cout << "The starting size of the population: ";
    while(cin >> popSize && popSize < 2)
        cout << "Enter again. Population size should not be less than 2.\n";
    
    cout << "Annual birth rate: ";
    while(cin >> birthRate && birthRate < 0)
        cout << "No negative value. Enter again: ";
    
    cout << "Annual death rate: ";
    while(cin >> deathRate &&  deathRate < 0)
        cout << "No negative value. Enter again: ";
    
    cout << "Number of years to display: ";
    while(cin >> numYears && numYears < 1)
        cout << "Number of years can't be less than 1. Enter again: ";
    
    int currentStats = popSize;
    
    for(int i = 0 ; i < numYears; i++)
    {
        cout << "Year " << i+1 << ": ";
        currentStats = sizePopulation(currentStats, birthRate, deathRate);
        cout << currentStats << " people\n";
    }

17. Transient Population
Modify Programming Challenge 16 to also consider the effect on population caused by
people moving into or out of a geographic area. Given as input a starting population
size, the annual birth rate, the annual death rate, the number of individuals who typically
move into the area each year, and the number of individuals who typically leave
the area each year, the program should project what the population will be numYears
from now. You can either prompt the user to input a value for numYear s, or you can
set it within the program.
Input Validation: Do not accept numbers less than 2 for the starting size. Do not accept
negative numbers for birth rate, death rate, arrivals, or departures.

    int popSize, birthRate, deathRate, numYears, moveOut, moveIn;
    
    cout << "The starting size of the population: ";
    while(cin >> popSize && popSize < 2)
        cout << "Enter again. Population size should not be less than 2.\n";
    
    cout << "Annual birth rate: ";
    while(cin >> birthRate && birthRate < 0)
        cout << "No negative value. Enter again: ";
    
    cout << "Annual death rate: ";
    while(cin >> deathRate &&  deathRate < 0)
        cout << "No negative value. Enter again: ";
    
    cout << "Number of people move out: ";
    while(cin >> moveOut && moveOut < 0 )
        cout << "No negative value. Enter again: ";
    
    
    cout << "Number of people move in: ";
    while(cin >> moveIn && moveIn < 0 )
        cout << "No negative value. Enter again: ";
    
    cout << "Number of years to display: ";
    while(cin >> numYears && numYears < 1)
        cout << "Number of years can't be less than 1. Enter again: ";
    
    int currentStats = popSize;
    
    for(int i = 0 ; i < numYears; i++)
    {
        cout << "Year " << i+1 << ": ";
        currentStats = sizePopulation(currentStats, birthRate, deathRate, moveIn, moveOut);
        cout << currentStats << " people\n";
    }
    

18. Paint Job Estimator
A painting company has determined that for every 110 square feet of wall space,
one gallon of paint and eight hours of labor will be required. The company charges
$25.00 per hour for labor. Write a modular program that allows the user to enter
the number of rooms that are to be painted and the price of the paint per gallon. It
should also ask for the square feet of wall space in each room. It should then display
the following data:
• The number of gallons of paint required
• The hours of labor required
• The cost of the paint
• The labor charges
• The total cost of the paint job
Input validation: Do not accept a value less than 1 for the number of rooms. Do not
accept a value less than $10.00 for the price of paint. Do not accept a negative value
for square footage of wall space.


    const float LABOR_PER_HOUR = 25.0,
                ROOM_SIZE = 110;
    float paintPrice, sqFeet;
    int numRoom;
    
    // Every 110 square feet  of wall needs 1 gallon of paint and 8 hours of labor
    
    cout << "The number of room to be painted: ";
    while(cin >> numRoom && numRoom < 1)
        cout << "Room shouldn't be less than 1. Enter again: ";
    
    cout << "Square feet per room: ";
    while(cin >> sqFeet && sqFeet <= 0)
        cout << "Can't be negative value. Enter again: ";
    
    cout << "The price of paint per gallon: ";
    while(cin >> paintPrice && paintPrice <= 0)
        cout << "Price of paint can't be less than or equal to zero. Enter again: ";
    
    info(paintPrice,sqFeet,numRoom,LABOR_PER_HOUR,ROOM_SIZE);

19. Using Files—Hospital Report
Modify Programming Challenge 15, Overloaded Hospital, to write the report it creates
to a file.

     char choice;
     cout << "Is the patient in or out-patient? ('i'/'o')\n";
     while (cin >> choice && (tolower(choice) != 'i' && tolower(choice) != 'o'))
         cout << "Input should be 'i' or 'o'. Enter again: ";

     int days;
     float rate, medCharges, serviceCharges, totalCharges;
    
    ofstream outputFile("Hospital_Report.txt");
    
    if(outputFile.fail())
        cout << "Can't create the file.\n";
    else{
        
        if (choice == 'i')
        {
            cout << "Days spent in hospital: ";
            cin >> days;
            cout << "Daily rate: ";
            cin >> rate;
            cout << "Medication charges: $";
            cin >> medCharges;
            cout << "Hospital services charge: $";
            cin >> serviceCharges;
            totalCharges = calCharges(days, rate, medCharges, serviceCharges);
            cout << "Total charges for the patient's stay in hospital is $ " << totalCharges << endl;
            
            storeInfo(outputFile, days, rate, medCharges, serviceCharges, totalCharges);
        }
        else
        {
            cout << "Hospital services charge: $";
            cin >> serviceCharges;
            cout << "Medication charges: $";
            cin >> medCharges;
            totalCharges = calCharges(serviceCharges, medCharges);
            cout << "Total charges for the patient's stay in hospital is $ " << totalCharges << endl;
            storeInfo2(outputFile, serviceCharges, medCharges, totalCharges);
        }
    }
    
    outputFile.close();

20. Stock Profit
The profit from the sale of a stock can be calculated as follows:
Profit = (( NS X SP ) - SC ) - (( NS X PP ) + PC )

where NS is the number of shares, SP is the sale price per share, SC is the sale commission
paid, PP is the purchase price per share, and PC is the purchase commission paid.
If the calculation yields a positive value, then the sale of the stock resulted in a profit.
If the calculation yields a negative number, then the sale resulted in a loss.
Write a function that accepts as arguments the number of shares, the purchase price per
share, the purchase commission paid, the sale price per share, and the sale commission
paid. The function should return the profit (or loss) from the sale of stock.
Demonstrate the function in a program that asks the user to enter the necessary data
and displays the amount of the profit or loss.

    int numShares;;
    float pricePerShare, commissionPaid, salePrice, saleCommission;
    
    cout << "The number of shares: ";
    cin >> numShares;
    
    cout << "Purchase price per share: ";
    cin >> pricePerShare;
    
    cout << "Perchase commission paid: ";
    cin >> commissionPaid;
    
    cout << "Sale price per share: ";
    cin >> salePrice;
    
    cout << "Sale commission: ";
    cin >> saleCommission;
    
    float profit = calProfit(numShares, salePrice, saleCommission, pricePerShare, commissionPaid);
    
    if(profit < 0)
        cout << "Loss total of $" << abs(profit) << endl;
    else
        cout << "Profit total of $" << profit << endl;

21. Multiple Stock Sales
Use the function that you wrote for Programming Challenge 20 (Stock Profit) in a
program that calculates the total profit or loss from the sale of multiple stocks. The
program should ask the user for the number of stock sales and the necessary data for
each stock sale. It should accumulate the profit or loss for each stock sale and then
display the total


    int numShares;;
    float pricePerShare, commissionPaid, salePrice, saleCommission, total =0;
    int types;
    
    cout << "How many type of stocks? ";
    cin >> types;
    
    for(int i = 0 ; i < types; i++)
    {
        cout << "\nStock # " << i+1 << ":\n";
        
        cout << "\nThe number of shares: ";
        cin >> numShares;
        
        cout << "Purchase price per share: ";
        cin >> pricePerShare;
        
        cout << "Perchase commission paid: ";
        cin >> commissionPaid;
        
        cout << "Sale price per share: ";
        cin >> salePrice;
        
        cout << "Sale commission: ";
        cin >> saleCommission;
        
        float profit = calProfit(numShares, salePrice, saleCommission, pricePerShare, commissionPaid);
        
        total += profit;
        
        
    }
    if(total < 0)
        cout << "Loss total of $" << abs(total) << endl;
    else
        cout << "Profit total of $" << total << endl;

22. isPrime Function
A prime number is a number that is only evenly divisible by itself and 1. For example,
the number 5 is prime because it can only be evenly divided by 1 and 5. The number 6,
however, is not prime because it can be divided evenly by 1, 2, 3, and 6.
Write a function name isPrime , which takes an integer as an argument and returns
true if the argument is a prime number, or false otherwise. Demonstrate the function
in a complete program.

isPrime(12);

23. Prime Number List
Use the isPrime function that you wrote in programming Challenge 22 in a program
that stores a list of all the prime numbers from 1 throught 100 in a file. 

    ofstream outputFile("Prime_Number.txt");
    if(outputFile.fail())
        cout << "The file can't be opened.\n";
    else{
        for(int i = 1 ; i <= 100; i++)
            isPrime(outputFile, i);
    }
    outputFile.close();
