int strLength(char* arr)
{
    int count = 0;
    while (*arr != '\0')
    {
        count++;
        arr++;
    }
    return count;
}

void reverse(char* arr)
{
    for (int i = strlen(arr); i >= 0; i--)
        cout << arr[i];
}

int wordCount(char* arr)
{
    int count = 1; //we initially include the first word since it doesn't have a space yet
    while (*arr != '\0')
    {
        if(isspace(*arr))
            count++;
        arr++;
    }
    return count;
}

int wordCount(string name)
{
    int count = 1;
    for (int i = 0; i < name.length(); i++)
    {
        if (name[i] == ' ')
            count++;
    }
    return count;
}

double averageLetter(char* arr)
{
    int num = 0;
    int count = 1;
    while (*arr != '\0')
    {
        if (isspace(*arr))
            count++;
        else if (isalnum(*arr) || ispunct(*arr))
            num++;
        arr++;
    }

    double average = static_cast<double>(num) / count;  // (number of letters / number of words)
    return average;
}

void capitalize(char* arr)
{
    bool cap = false;
    bool first = true;
    while (*arr != '\0')
    {
        //This one just to capitalize the first letter
        if (isalpha(*arr) && first) {
            cout << char(toupper(*arr));
            first = false;
        }
        else if (*arr == '.' || *arr == '?') {
            cout << *arr;
            cap = true;
        }
        else if (isspace(*arr)) {
            cout << *arr;
            arr++;
            continue;
        }
        else if (isalpha(*arr) && cap) {
            cout << char(toupper(*arr));
            cap = false;
        }
        else
            cout << *arr;
        arr++;
    }
}

void replaceSubstring(string string1, string string2, string string3){
    
    int pos = string1.find(string2);
    int n = string2.length();
    string1.replace(pos, n, string3);
    
    cout << string1 << endl;
}

void menu()
{
    cout << "\nPress the following choices\n";
    cout << "A. Count the number of vowels in the string.\n"
        << "B. Count the number of consonants in the string.\n"
        << "C. Count both the vowels and consonants in the string.\n"
        << "D. Enter another string.\n"
        << "E. Exit the program.\n";
}

void vowelsFind(char* arr)
{
    int count = 0;
    while (*arr != '\0')
    {
        if (*arr == 'a' || *arr == 'e' || *arr == 'i' || *arr == 'o' || *arr == 'u')
            count++;
        arr++;
    }
    cout << "The number of vowels in the string are " << count << endl;
}

void consFind(char* arr)
{
    int count = 0;
    while (*arr != '\0')
    {
        //cout << *arr << endl;
        if (isalpha(*arr) && (*arr != 'a') && (*arr != 'e') && (*arr != 'i') && (*arr != 'o') && (*arr != 'u'))
            count++;
        arr++;
    }
    cout << "The number of consonants in the string are " << count << endl;
}

void mostFrequent(char* letter){
    vector<char>alpha;
    vector<int>time;
    char temp;
   
    int prev = 0;
    while(*letter != '\0'){
        //we have this part so we don't count the space or period in it.
        if(*letter == ' ' || *letter == '.'){
            letter++;
            continue;
        }
    
        int count = 1;
        char* nxtPtr = (letter+1); ;
    
        while(*nxtPtr != '\0')
        {
            if(tolower(*letter) == tolower(*nxtPtr)){
                count++;
            }
    
            nxtPtr++;
        }
        if(count > prev){
            alpha.clear();  //clear the old content out if there is a new character
            time.clear();   //with greater number
            prev = count;
            temp = tolower(*letter);
            alpha.push_back(temp);
            time.push_back(prev);
        }
        else if(count == prev)  //if there is a character with the same nunber of apperance
        {
            alpha.push_back(*letter);
            time.push_back(count);
        }
        letter++;
    }
    
    if(prev == 1)
        cout << "Every character has the same number of appearance\n";
    else
        cout << "The most frequent letter in the string is ";
        for(auto element : alpha)
            cout << element << " ";
    cout << "with ";
        for(auto element : time)
            cout << element << " ";
    cout << "appearance in order.\n";
}

void reverse(char* string3){
    bool check = false;
    bool quit = true;
    char* temp = new char[100];
    char begin = *string3;
    int size = 0;
    //cout << begin << endl;
    while(*string3 != '\0')
    {
        char* nxtPtr = (string3+1);
        if(*nxtPtr == '\0')
        {
            char* a = string3; //point to the end character of the string and we do point reverse backward
            while(quit){
                //cout << *a << " ";
                if(!check){
                    strcpy(temp, a);
                    check = true;
                }else
                    strncat(temp,a, 1);
                if(*a == begin)
                    quit = false;
                a -= 1;
            }
        }
        string3++;      //when the pointer reach the end of the word. It is at '\0'
        size++;         //we need to keep track of the size of the word. So we can
    }                   //point the pointer back to the beginning of the word again.
   
    string3 = string3-size;  //Here we subtract the size. So we go the beginning
    while(*string3 != '\0'){  //copy the value from temp variable to the original
        *string3 = *temp;     //argument. This way we edit the actual value.
        string3++;
        temp++;
    }
}

void formatChange(string& date)
{
    string month[12] = {"Jan", "Feb", "Mar", "Apr",
                        "May", "Jun", "Jul", "Aug",
                        "Sep", "Oct", "Nov", "Dec"};
    int space;
    space = date.find('/');  //find forward slash
    
    if(space == 2)
    {
        for(int x = 2; x < 6; x+=3){
            date.replace(x, 1, " ");
            if(x == 5)
                date.replace(x, 1, ", ");
        }
    }
    else if(space == 1)
    {
        for(int x = 1; x < 4; x+=2){
            date.replace(x, 1, " ");
            if(x == 3)
                date.replace(x, 1, ", ");
        }
    }
    int num = stoi(date); //when it converts string to int. It will stop when it runs over the value that is not a number in this case is "/"
    
    //convert the month to string format
    for(int i = 1; i <= 12; i++){
        if(num == i){
            if(space == 2)
                date.replace(0, 2, month[i-1]);
            else
                date.replace(0,1, month[i-1]);
        }
    }
}

void checkDateValid(string& date)
{
    int month;
    do{
        month = stoi(date);
        if(month < 1 || month > 12){
            
            cout << "Month should not be less than 1 or greater than 12.\n"
                 << "Enter the date in the form of mm/dd/yyyy.\n";
            getline(cin, date);
        }
    }while((month < 1) || (month > 12));
}

void wordSeperator(char word[]){
    
    int count = 0;
    int countWord = 0;
    int space = 0;
    bool first = true;

    //We use this loop to count how many char in the string
    while(word[countWord] != '\0')
        countWord++;
    
    //create a string char to store the value from argument with the edited version
    char temp[countWord];
    
    while(word[count] != '\0'){
        //skip the first capital of the string
        if(first && isupper(word[count])){
            strncat(temp, &word[count], 1);
            count++;
            first = false;
            continue;
        }
        //if we run accross the capital letter
        else if(isupper(word[count]))
        {
            strncat(temp, " ", 1);  //add space
            space++;    //keep track of space added to the new string so we can make a copy back to the original argument with the correct size
            char lower = tolower(word[count]);  //convert the lowercase and add it to temp string
            strncat(temp, &lower, 1);
        }
        else  //if there is nothing just add it to the string
            strncat(temp, &word[count], 1);
        count++;
    }
    //copy the edited one back to original
    strncpy(word, temp, count+space);
}

//#################### String object version ###################
void wordSeperator2(string& word){
    
    int first = 0;
    for(int i=0;i < word.size(); i++)
    {
        if(isupper(word[i]) && first == 0)
            first++;
        if(isupper(word[i+1])){
            word[i+1] = tolower(word[i+1]);
            word.insert(i+1, " ");
        }
    }
}


string trim(string str)
{
    //erase 1 character at index 0 if it is a space
    while(str[0] == ' ')
        str.erase(0,1);
    
    return str;
}

string getWord(string& str)
{
    //trim any spaces from the beginning of the string
    str = trim(str);
    
    //get the beginning of the word by locating the first space
    //or until the end of the string is reached
    int i = 0;
    while(str[i] != ' ' && i < str.size())
        i++;
    //i now equals the length of the word
    //so copy the part of the string from the beginning to the i
    string word = str.substr(0, i);
    
    //erase the word from the string after we go through it
    str.erase(0, i);
    
    return word;
}

string translatePigLatin(string word)
{
    //get the first character
    char first = word[0];
    
    //append the letter to the end of the word
    word.append(1, first);
    
    //append the ay to the end of the word
    word.append("ay");
    
    //delete the first character
    word.erase(0,1);
    
    return word;
}

int main()
{
1. String Length
Write a function that returns an integer and accepts a pointer to a C-string as an argument.
The function should count the number of characters in the string and return that
number. Demonstrate the function in a simple program that asks the user to input a
string, passes it to the function, and then displays the function’s return value.

    const int SIZE = 50;
    char input[SIZE];

    cout << "Enter the string\n";
    cin.getline(input, SIZE);

    int length = strLength(input);

    cout << "There are " << length << " characters in your string input.\n";

2. Backward String
Write a function that accepts a pointer to a C-string as an argument and displays its
contents backward. For instance, if the string argument is “ Gravity ” the function
should display “ ytivarG ”. Demonstrate the function in a program that asks the user
to input a string and then passes it to the function.

    const int SIZE = 50;
    char input[SIZE];

    cout << "Enter your string and we will reverse it.\n";
    cin.getline(input, SIZE);

    reverse(input);


3. Word Counter
Write a function that accepts a pointer to a C-string as an argument and returns the
number of words contained in the string. For instance, if the string argument is “Four
score and seven years ago” the function should return the number 6. Demonstrate the
function in a program that asks the user to input a string and then passes it to the function.
The number of words in the string should be displayed on the screen. Optional
Exercise: Write an overloaded version of this function that accepts a string class object
as its argument.

    const int SIZE = 80;
    char input[SIZE];

    cout << "Enter your string and we will count the number of the word.\n";
    cin.getline(input, SIZE);

    int num = wordCount(input);

    cout << "There are " << num << " words in your string.\n";
   
    //string version
    string input2 = "Hello nice to meet you";
    int num2 = wordCount(input2);

    cout << "\nThere are " << num2 << " words in your string.\n";

4. Average Number of Letters
Modify the program you wrote for Problem 3 (Word Counter), so it also displays the
average number of letters in each word.

    const int SIZE = 80;
    char input[SIZE];

    cout << "Enter your string and we will count the number of the word.\n";
    cin.getline(input, SIZE);

    double aveLetter = averageLetter(input);

    cout << "The average number of letters in each word is " << aveLetter << endl;

5. Sentence Capitalizer
Write a function that accepts a pointer to a C-string as an argument and capitalizes
the first character of each sentence in the string. For instance, if the string argument
is “ hello. my name is Joe. what is your name? ” the function should manipulate
the string so it contains “ Hello. My name is Joe. What is your name? ”
Demonstrate the function in a program that asks the user to input a string and then
passes it to the function. The modified string should be displayed on the screen.
Optional Exercise: Write an overloaded version of this function that accepts a string
class object as its argument.

    const int SIZE = 80;
    char input[SIZE];

    cout << "Enter the string\n";
    cin.getline(input, SIZE);

    capitalize(input);

6. Vowels and Consonants
Write a function that accepts a pointer to a C-string as its argument. The function
should count the number of vowels appearing in the string and return that number.
Write another function that accepts a pointer to a C-string as its argument. This function
should count the number of consonants appearing in the string and return that
number.
Demonstrate these two functions in a program that performs the following steps:
1. The user is asked to enter a string.
2. The program displays the following menu:
A) Count the number of vowels in the string
B) Count the number of consonants in the string
C) Count both the vowels and consonants in the string
D) Enter another string
E) Exit the program
3. The program performs the operation selected by the user and repeats until the user
selects E to exit the program.

    const int SIZE = 80;
    char word[SIZE];
    char input;

    cout << "Please enter the string\n";
    cin.getline(word, SIZE);

    do {
       
        menu();
        cin >> input;

        while (toupper(input) != 'A' && toupper(input) != 'B' && toupper(input) != 'C' && toupper(input) != 'D' && toupper(input) != 'E')
        {
            cout << "Invalid input. Enter again: ";
            cin >> input;
        }


        switch (input)
        {
        case 'a':
        case 'A':
            vowelsFind(word);
            break;
        case 'b':
        case 'B':
            consFind(word);
            break;
        case 'c':
        case 'C':
            vowelsFind(word);
            consFind(word);
            break;
        case 'd':
        case 'D':
            cin.ignore();
            cout << "Enter new string: ";
            cin.getline(word, SIZE);
            break;
        }
    } while (toupper(input) != 'E');

7. Name Arranger
Write a program that asks for the user’s first, middle, and last names. The names
should be stored in three different character arrays. The program should then store,
in a fourth array, the name arranged in the following manner: the last name followed
by a comma and a space, followed by the first name and a space, followed by the
middle name. For example, if the user entered “ Carol Lynn Smith ”, it should store
“ Smith, Carol Lynn ” in the fourth array. Display the contents of the fourth array
on the screen.

    const int SIZE= 15,
              SIZE2= 30;
    
    char first[SIZE];
    char middle[SIZE];
    char last[SIZE];
    char fullName[SIZE2];
    
    cout << "Enter your first name: ";
    cin.getline(first,SIZE);
    
    cout << "Middle name: ";
    cin.getline(middle, SIZE);
    
    cout << "Last name: ";
    cin.getline(last, SIZE);
    
    //add fullname with last name and comma and space
    int maxChars = sizeof(fullName) - (strlen(fullName)+1);
    
    strncat(fullName, last, maxChars);
    strncat(fullName, ", ", maxChars);
    strncat(fullName, first, maxChars);
    strncat(fullName, ", ", maxChars);
    strncat(fullName, middle, maxChars);
    
    cout << "\n" <<fullName << endl;

8. Sum of Digits in a String
Write a program that asks the user to enter a series of single digit numbers with nothing
separating them. Read the input as a C-string or a string object. The program should
display the sum of all the single-digit numbers in the string. For example, if the user
enters 2514, the program should display 12, which is the sum of 2, 5, 1, and 4. The
program should also display the highest and lowest digits in the string.

    const int SIZE = 10;
    char number[SIZE];
    
    cout << "Please enter the your desire number (no more than 10 digit): ";
    cin.getline(number, SIZE);
    
    int total =0;
    int index = 0;
    int high = number[index] - '0';
    int low = number[index] - '0';
    
    while(number[index] != '\0'){
        total += (number[index] - '0');  //since the char value is not an actual integer.                                //We will need to substract 0 out of it. If we use                              //string, we will use atoi()
        if(number[index] - '0' > high)
            high = number[index]- '0';
        if(number[index] - '0' < low)
            low = number[index] - '0';
        index++;
    }
    
    cout << "The sum of your number is " << total << endl;
    cout << "The highest digit number is " <<  high << endl;
    cout << "The lowest digit number is " << low << endl;

9. Most Frequent Character
Write a function that accepts either a pointer to a C-string, or a string object, as its
argument. The function should return the character that appears most frequently in the
string. Demonstrate the function in a complete program.

     mostFrequent("I like to eat ice cream");

10. replaceSubstring Function
Write a function named replaceSubstring . The function should accept three C-string
or string object arguments. Let’s call them string1 , string2 , and string3 . It
should search string1 for all occurrences of string2 . When it finds an occurrence of
string2 , it should replace it with string3 . For example, suppose the three arguments
have the following values:
string1 : “the dog jumped over the fence”
string2 : “the”
string3 : “that”
With these three arguments, the function would return a string object with the value
“that dog jumped over that fence.” Demonstrate the function in a complete program.

    string one = "the dog jump over the fence",
           two = "the",
           three = "that";
    
    replaceSubstring(one, two, three);

11. Case Manipulator
Write a program with three functions: upper , lower , and reverse . The upper function
should accept a pointer to a C-string as an argument. It should step through each character
in the string, converting it to uppercase. The lower function, too, should accept a
pointer to a C-string as an argument. It should step through each character in the string,
converting it to lowercase. Like upper and lower , reverse should also accept a pointer
to a string. As it steps through the string, it should test each character to determine
whether it is upper- or lowercase. If a character is uppercase, it should be converted to
lowercase. Likewise, if a character is lowercase, it should be converted to uppercase.
Test the functions by asking for a string in function main , then passing it to them in
the following order: reverse , lower , and upper

    char one[] = "I eat ice-cream today";
    upper(one);
    lower(one);
    reverse(one);
    cout << one <<endl;

12. Password Verifier
Imagine you are developing a software package that requires users to enter their own
passwords. Your software requires that users’ passwords meet the following criteria:
• The password should be at least six characters long.
• The password should contain at least one uppercase and at least one lowercase letter.
• The password should have at least one digit.
Write a program that asks for a password and then verifies that it meets the stated
criteria. If it doesn’t, the program should display a message telling the user why.

    const int SIZE=21;
    char password[SIZE];
    
    cout << "Please set your password (no more than 20 characters) " << endl;
    cin.get(password,SIZE);
    
    int num = 0;
    bool upper = false,
         lower = false,
         digit = false,
         number = false;
     
    while(password[num] != '\0')
    {
        if(num >= 5)
            number = true;
        if(isupper(password[num]))
           upper = true;
        if(islower(password[num]))
           lower = true;
        if(isdigit(password[num]))
            digit = true;
        num++;
    }
    
    if(number && upper && lower && digit)
        cout << "The password is set\n";
    else{
        if(num < 6)
            cout << "The password should has at least 6 characters\n";
        if(!upper || !lower)
            cout << "The password should have at least one upper case and one lower case\n";
        if(!digit)
            cout << "The password should have at least one digit\n";
    }

13. Date Printer
Write a program that reads a string from the user containing a date in the form mm/dd/yyyy.
It should print the date in the form March 12, 2014.

    //This problem I will use string object to solve string dateFormat;
    cout << "Enter the date in the form of mm/dd/yyyy.\n";
    getline(cin, dateFormat);
    
    checkDateValid(dateFormat);
    formatChange(dateFormat);
    
    cout << dateFormat << endl;

14. Word Separator
Write a program that accepts as input a sentence in which all of the words are run
together, but the first character of each word is uppercase. Convert the sentence to a
string in which the words are separated by spaces and only the first word starts with
an uppercase letter. For example the string “StopAndSmellTheRoses.” would be converted
to “Stop and smell the roses.”

    string sample= "StopAndSmellTheRoses.";

    wordSeperator(sample);
    wordSeperator2(sample);

    cout << sample << endl;

15. Character Analysis
If you have downloaded this book’s source code from the companion Web site, you
will find a file named text.txt in the Chapter 10 folder. (The companion Web site is
at www.pearsonhighered.com/gaddis .) Write a program that reads the file’s contents
and determines the following:
• The number of uppercase letters in the file
• The number of lowercase letters in the file
• The number of digits in the file

    int upperCase = 0;
    int lowerCase = 0;
    int digit = 0;
    
    ifstream inputFile("text.txt");
    
    if(inputFile.is_open()){
        char myChar;
        while(inputFile){
            myChar = inputFile.get();
            if(isupper(myChar))
                upperCase++;
            else if(islower(myChar))
                lowerCase++;
            else if(isdigit(myChar))
                digit++;
        }
    }
    else
        cout << "Can't read the file.\n";
   
    //Remember to close the file
    inputFile.close();
    
    cout << "There are " << upperCase << " uppercase  letters, \n"
         << lowerCase << " lowercase letters, and\n"
         << digit << " number of digits in the file.\n";
    
    


16. Pig Latin
Write a program that reads a sentence as input and converts each word to “Pig Latin.”
In one version, to convert a word to Pig Latin you remove the first letter and place
that letter at the end of the word. Then you append the string “ay” to the word. Here
is an example:
English: I SLEPT MOST OF THE NIGHT
Pig Latin: IAY LEPTSAY OSTMAY FOAY HETAY IGHTNAY

    string str; //user entered sentence
    string pigLatin;  //translated sentence
    
    //get the input
    cout << "Enter the sentence that you want to translated into Pig Latin:\n";
    getline(cin, str);
    
    //translate
    //every time we use getWord() the string will get lesser, until nothing left
    while(str.size() > 0)
    {
        //get the word from the sentence
        string word = getWord(str);
        
        //translate word to pig latin
        word = translatePigLatin(word);
        
        //add the word to our translated string
        pigLatin += word + " ";
    }
    
    //display the translation
    cout << pigLatin << endl;
    getchar();  //we use here just to freeze the screen
    

17. Morse Code Converter
Morse code is a code where each letter of the English alphabet, each digit, and various
punctuation characters are represented by a series of dots and dashes. Table 10-9
shows part of the code.
Write a program that asks the user to enter a string, and then converts that string to
Morse code.

18. Phone Number List
Write a program that has an array of at least 10 string objects that hold people’s
names and phone numbers. You may make up your own strings, or use the following:
        "Alejandra Cruz, 555-1223"
        "Joe Looney, 555-0097"
        "Geri Palmer, 555-8787"
        "Li Chen, 555-1212"
        "Holly Gaddis, 555-8878"
        "Sam Wiggins, 555-0998"
        "Bob Kain, 555-8712"
        "Tim Haynes, 555-7676"
        "Warren Gaddis, 555-9037"
        "Jean James, 555-4939"
        "Ron Palmer, 555-2783"
The program should ask the user to enter a name or partial name to search for in the
array. Any entries in the array that match the string entered should be displayed. For
example, if the user enters “ Palmer ” the program should display the following names
from the list:
Geri Palmer, 555-8787
Ron Palmer, 555-2783

19. Check Writer
Write a program that displays a simulated paycheck. The program should ask the user to
enter the date, the payee’s name, and the amount of the check (up to $10,000). It should
then display a simulated check with the dollar amount spelled out, as shown here:
Date: 11/24/2014
Pay to the Order of: John Phillips $1920.85
One thousand nine hundred twenty and 85 cents
Be sure to format the numeric value of the check in fixed-point notation with two
decimal places of precision. Be sure the decimal place always displays, even when the
number is zero or has no fractional part. Use either C-strings or string class objects
in this program.
Input Validation: Do not accept negative dollar amounts, or amounts over $10,000.


return 0;
}
