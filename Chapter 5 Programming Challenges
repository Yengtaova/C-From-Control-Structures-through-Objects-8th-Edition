1. Sum of Numbers
Write a program that asks the user for a positive integer value. The program should use
a loop to get the sum of all the integers from 1 up to the number entered. For example,
if the user enters 50, the loop will find the sum of 1, 2, 3, 4, … 50.
Input Validation: Do not accept a negative starting number.

    int input, sum = 0;
    cout << "Please enter a number and we will do a sum up from 1 to your enter number: ";
    cin >> input;

    while (input <= 0) {
        cout << "No negative value or zero. Enter again.";
        cin >> input;
    }

    for (int i = 1; i <= input; i++)
        sum += i;

    cout << "The sum from 1 to " << input << " is " << sum;
    
2. Characters for the ASCII Codes
Write a program that uses a loop to display the characters for the ASCII codes 0
through 127. Display 16 characters on each line.

   for (int i = 0, y = 0; i <= 127; i++, y++)
    {
        if (y == 17)
            cout << "\n";
        cout << char(i) << " ";
    }

3. Ocean Levels
Assuming the ocean’s level is currently rising at about 1.5 millimeters per year, write
a program that displays a table showing the number of millimeters that the ocean will
have risen each year for the next 25 years.

    const float RISING_LEVEL = 1.5; //millimeter per year
    float seaLevel = 0;
    int i = 0;
    while (++i <= 25) {
        seaLevel += RISING_LEVEL;
        cout << i << " year: " << seaLevel << " millimeters.\n";
    }

4. Calories Burned
Running on a particular treadmill you burn 3.6 calories per minute. Write a program that
uses a loop to display the number of calories burned after 5, 10, 15, 20, 25, and 30 minutes.

    const float CAL_PER_MINUTE = 3.6;
    float calBurn;

    for (int i = 5; i <= 30; i += 5)
    {
        calBurn = i * CAL_PER_MINUTE;
        cout << i << " minutes: " << calBurn << " cal.\n";
    }

5. Membership Fees Increase
A country club, which currently charges $2,500 per year for membership, has
announced it will increase its membership fee by 4% each year for the next six years.
Write a program that uses a loop to display the projected rates for the next six years.

    const int CHARGE_PER_YEAR = 2500;
    float membershipIncrease = 0.04;
    float accumulate = CHARGE_PER_YEAR;
    float increase;

    for (int i = 0; i < 6; i++) {
        increase = accumulate * membershipIncrease;
        accumulate += increase;
        cout << i + 1 << " year: $" << accumulate << endl;
    }

6. Distance Traveled
The distance a vehicle travels can be calculated as follows:
distance = speed * time
For example, if a train travels 40 miles per hour for 3 hours, the distance traveled is
120 miles.
Write a program that asks the user for the speed of a vehicle (in miles per hour) and how
many hours it has traveled. The program should then use a loop to display the distance the
vehicle has traveled for each hour of that time period. Here is an example of the output:

What is the speed of the vehicle in mph? 40
How many hours has it traveled? 3
Hour Distance Traveled
--------------------------------
1           40
2           80
3          120

Input Validation: Do not accept a negative number for speed and do not accept any
value less than 1 for time traveled.

 float speed, time, distance;


    cout << "The speed of vehicle in miles per hour: ";
    cin >> speed;
    while(speed < 0)
    {
        cout << "No negative speed. Enter again:";
        cin >> speed;
    }

    cout << "How many hours it has traveled: ";
    cin >> time;
    while (time <= 1)
    {
        cout << "Time should not less or equal to 1 hour: ";
        cin >> time;
    }

    cout << "Hour\tDistance Traveled\n"
        << "--------------------------\n";
    for (int i = 1; i <= time; i++) {
        distance = speed * i;
        cout << i << "\t" << setw(10) <<right << distance << endl;
    }


7. Pennies for Pay
Write a program that calculates how much a person would earn over a period of time
if his or her salary is one penny the first day and two pennies the second day, and continues
to double each day. The program should ask the user for the number of days.
Display a table showing how much the salary was for each day, and then show the
total pay at the end of the period. The output should be displayed in a dollar amount,
not the number of pennies.

Input Validation: Do not accept a number less than 1 for the number of days worked.

    int numDays, dollar;
    int cent;
    int total = 1;
    

    cout << "How many days that you work? ";
    cin >> numDays;

    while (numDays < 1) {
        cout << "No work less than 1 day. Re-enter: ";
        cin >> numDays;
    }

    for (int i = 1; i <= numDays; i++) {
        if(i == 1){
            dollar = total / 100;
            cent = total % 100;
            cout << "Day " << i << ":\t$" << float(cent/100.0) << endl;
        }
        else {
            total *= 2; //continue to double each day
            dollar = total / 100;
            cent = total % 100;
            if (cent % 100 == 0) {
                dollar = cent / 100;
            }
            cout << "Day " << i << ":\t$" << dollar + float(cent/100.0) << endl;
        }
    }

8. Math Tutor
This program started in Programming Challenge 15 of Chapter 3 , and was modified
in Programming Challenge 9 of Chapter 4 . Modify the program again so it displays a
menu allowing the user to select an addition, subtraction, multiplication, or division
problem. The final selection on the menu should let the user quit the program. After
the user has finished the math problem, the program should display the menu again.
This process is repeated until the user chooses to quit the program.
Input Validation: If the user selects an item not on the menu, display an error message
and display the menu again.

  char choice;
    char sign;
    int num1, num2, result;
    unsigned int seed = time(0);
    srand(seed);

    do {
        cout << "\tCalculation Menu\n";
        cout << "Press 1: Addition\n"
             << "Press 2: Subtraction\n"
             << "Press 3: Multiplication\n"
             << "Press 4: Division\n"
             << "Press q: Exit program\n";
        cin >> choice;

        num1 = rand() % 1000;
        num2 = rand() % 1000;

        if (tolower(choice) != 'q')
        {
            switch(choice) {
            case '1':
                result = num1 + num2;
                sign = '+';
                break;
            case '2':
                result = num1 - num2;
                sign = '-';
                break;
            case '3':
                result = num1 * num2;
                sign = 'x';
                break;
            case '4':
                if (num2 == 0) {
                    cout << "Cant divide by 0.\n";
                    continue;
                }
                else
                    result = num1 / num2;
                sign = char(247);
                break;
            }
            cout << setw(6) << right << num1 << "\n" <<sign <<"\n" << setw(6) << right << num2 
                 << "\n------\n" << setw(6) << right << result << endl;
        }
    } while (tolower(choice) != 'q');

9. Hotel Occupancy
Write a program that calculates the occupancy rate for a hotel. The program should
start by asking the user how many floors the hotel has. A loop should then iterate once
for each floor. In each iteration, the loop should ask the user for the number of rooms
on the floor and how many of them are occupied. After all the iterations, the program
should display how many rooms the hotel has, how many of them are occupied, how
many are unoccupied, and the percentage of rooms that are occupied. The percentage
may be calculated by dividing the number of rooms occupied by the number of rooms.

Input Validation: Do not accept a value less than 1 for the number of floors. Do not
accept a number less than 10 for the number of rooms on a floor.

    int numFloor, numRoom, occupied, 
        totalOccupied = 0, totalRoom = 0;

    cout << "How many floors does hotel has? ";
    cin >> numFloor;

    for (int i = 0; i < numFloor; i++)
    {
        if (i == 13)  //skip the 13th floor since most hotel doesnt have it
            continue;
        cout << "Number of room in " << i + 1 << " floor: ";
        cin >> numRoom;
        cout << "How many are occupied? ";
        cin >> occupied;
        totalRoom += numRoom;
        totalOccupied += occupied;
    }

    cout << "The hotel has total rooms of " << totalRoom
        << "\nOccupied rooms: " << totalOccupied
        << "\nUnoccupied rooms: " << totalRoom - totalOccupied
        << "\nPercentage of rooms that are occupied " << float(totalOccupied) / totalRoom << endl;

10. Average Rainfall
Write a program that uses nested loops to collect data and calculate the average rainfall
over a period of years. The program should first ask for the number of years. The outer
loop will iterate once for each year. The inner loop will iterate twelve times, once for
each month. Each iteration of the inner loop will ask the user for the inches of rainfall
for that month.
After all iterations, the program should display the number of months, the total inches
of rainfall, and the average rainfall per month for the entire period.
Input Validation: Do not accept a number less than 1 for the number of years. Do not
accept negative numbers for the monthly rainfall.

    const int NUM_MONTH = 12;
    int year, totalMonth;
    string months[NUM_MONTH] = { "January", "February", "March", "April", "May", "June", "July", 
                                  "August", "September", "October", "November", "December" };
    float rainfall[NUM_MONTH];
    float average, totalRainfall = 0;
   

    cout << "How many years? ";
    cin >> year;

    cout << "Enter the rainfall (inches) for each month.\n";

    for (int i = 0; i < year; i++) 
    {
        cout << "Year " << i+1 << endl;
        for (int j = 0; j < NUM_MONTH; j++)
        {
            cout << months[j] << ": ";
            cin >> rainfall[j];
            totalRainfall += rainfall[i];
        }
    }

    totalMonth = year * NUM_MONTH;
    average = totalRainfall / totalMonth;

    cout << "\nTotal months: " << totalMonth << " months."
         << "\nTotal inches of rainfall: " << totalRainfall << " inches."
         << "\nAverage rainfall per month: " << average << " inches.\n";

11. Population
Write a program that will predict the size of a population of organisms. The program
should ask the user for the starting number of organisms, their average daily population
increase (as a percentage), and the number of days they will multiply. A loop
should display the size of the population for each day.
Input Validation: Do not accept a number less than 2 for the starting size of the population.
Do not accept a negative number for average daily population increase. Do not
accept a number less than 1 for the number of days they will multiply.

    int numDay;
    float population, increasePercent, dailyIncrease;

    cout << "Starting population: ";
    while (cin >> population && population < 2)
        cout << "Population should not be less than 2. Enter again: ";

    cout << "Average daily population increase (in percent): ";
    while (cin >> increasePercent && increasePercent < 0)
        cout << "No negative value for population increase. Enter again: ";

    cout << "The number of day that will be multiplied: ";
    while (cin >> numDay && numDay < 1)
        cout << "The day should not be less than 1. Enter again: ";

    cout << setprecision(2) << fixed << showpoint;

    for (int i = 0; i < numDay; i++)
    {
        dailyIncrease = (population * increasePercent) / 100;
        population += dailyIncrease;
        cout << "Day " << i + 1 << ": " << population << endl;
    }

12. Celsius to Fahrenheit Table
In Programming Challenge 10 of Chapter 3 you were asked to write a program that
converts a Celsius temperature to Fahrenheit. Modify that program so it uses a loop
to display a table of the Celsius temperatures 0–20, and their Fahrenheit equivalents.

    float fahrenheit;
    
    cout << "Celsius\tFahrenheit\n";
    for (int i = 0; i <= 20; i++)
    {
        fahrenheit = (i * 9 / 5) + 32;
        cout << i << "\370C\t  " << fahrenheit << "\370F" << endl;
    }
    
13. The Greatest and Least of These
Write a program with a loop that lets the user enter a series of integers. The user should
enter −99 to signal the end of the series. After all the numbers have been entered, the
program should display the largest and smallest numbers entered.

    int input;
    int highest, lowest;
    cout << "Enter a series of integer and we will give the least and greatest of them. Enter -99 to stop: ";
    cin >> input;

    highest = lowest = input;

    do {
        if (input > highest)
            highest = input;
        else if (input < lowest)
            lowest = input;
        cin >> input;
    } while (input != -99);

    cout << "The largest number is " << highest << " and the lowest is " << lowest << endl;

14. Student Line Up
A teacher has asked all her students to line up single file according to their first name.
For example, in one class Amy will be at the front of the line and Yolanda will be at
the end. Write a program that prompts the user to enter the number of students in the
class, then loops to read that many names. Once all the names have been read it reports
which student would be at the front of the line and which one would be at the end of
the line. You may assume that no two students have the same name.
Input Validation: Do not accept a number less than 1 or greater than 25 for the number
of students.

    int numStudents;
    string name, first, last;

    //I set 15 students in the class
    cout << "How many students are in the class?\n";
    while (cin >> numStudents && (numStudents < 0 || numStudents > 25))
        cout << "No less than 1 or greater than 25. Enter again";

    ifstream myFile("studentList.txt");
    

    if (myFile)
    {
        //assign the first and last to the first name so we can compare it in the loop
        myFile >> name; 
        first = last = name;
        while (myFile >> name) {
            if (first > name)
                first = name;
            else if (last < name)
                last = name;
        }
        cout << "The fist student in line is " << first
            << "\nThe last student in line is " << last << endl;
        cout << "Closing the file...\n";
        myFile.close();
    }
    else
        cout << "File cant be opened.\n";

15. Payroll Report
Write a program that displays a weekly payroll report. A loop in the program should
ask the user for the employee number, gross pay, state tax, federal tax, and FICA withholdings.
The loop will terminate when 0 is entered for the employee number. After the
data is entered, the program should display totals for gross pay, state tax, federal tax,
FICA withholdings, and net pay.

    int empNumber;
    float grossPay, stateTax, fedTax, fica, netpay;

    do {
        cout << "Employee number: ";
        cin >> empNumber;
        if (empNumber == 0)
            continue;
        cout << "Gross pay: ";
        cin >> grossPay;
        cout << "State tax: ";
        cin >> stateTax;
        cout << "Federal tax: ";
        cin >> fedTax;
        //FICA tax is a combination of Social Security and Medicare taxes. Employers and employess pays 7.65% each.
        cout << "FICA withholdings: ";
        cin >> fica;

        netpay = grossPay - (grossPay * (stateTax + fedTax)) / 100;
        cout << "Gross pay: $" << grossPay
            << "\nState tax: $" << stateTax
            << "\nFederal tax: $" << fedTax
            << "\nFICA withholdings: $" << fica
            << "\nNet pay: $" << netpay << endl << endl;

    } while (empNumber != 0);
    
16. Savings Account Balance
Write a program that calculates the balance of a savings account at the end of a period
of time. It should ask the user for the annual interest rate, the starting balance, and the
number of months that have passed since the account was established. A loop should
then iterate once for every month, performing the following:

A) Ask the user for the amount deposited into the account during the month. (Do not
accept negative numbers.) This amount should be added to the balance.
B) Ask the user for the amount withdrawn from the account during the month. (Do
not accept negative numbers.) This amount should be subtracted from the balance.
C) Calculate the monthly interest. The monthly interest rate is the annual interest rate
divided by twelve. Multiply the monthly interest rate by the balance, and add the
result to the balance.

After the last iteration, the program should display the ending balance, the total
amount of deposits, the total amount of withdrawals, and the total interest earned.

17. Sales Bar Chart
Write a program that asks the user to enter today’s sales for five stores. The program
should then display a bar graph comparing each store’s sales. Create each bar in the bar
graph by displaying a row of asterisks. Each asterisk should represent $100 of sales.
Here is an example of the program’s output.

Enter today's sales for store 1: 1000 [Enter]
Enter today's sales for store 2: 1200 [Enter]
Enter today's sales for store 3: 1800 [Enter]
Enter today's sales for store 4: 800 [Enter]
Enter today's sales for store 5: 1900 [Enter]

SALES BAR CHART
(Each * = $100)
Store 1: **********
Store 2: ************
Store 3: ******************
Store 4: ********
Store 5: *******************

18. Population Bar Chart
Write a program that produces a bar chart showing the population growth of
Prairieville, a small town in the Midwest, at 20-year intervals during the past 100 years.
The program should read in the population figures (rounded to the nearest 1,000 people)
for 1900, 1920, 1940, 1960, 1980, and 2000 from a file. For each year it should
display the date and a bar consisting of one asterisk for each 1,000 people. The data
can be found in the People.txt file.
Here is an example of how the chart might begin:
PRAIRIEVILLE POPULATION GROWTH
(each * represents 1,000 people)
1900 **
1920 ****
1940 *****

19. Budget Analysis
Write a program that asks the user to enter the amount that he or she has budgeted
for a month. A loop should then prompt the user to enter each of his or her expenses
for the month and keep a running total. When the loop finishes, the program should
display the amount that the user is over or under budget.

20. Random Number Guessing Game
Write a program that generates a random number and asks the user to guess what the
number is. If the user’s guess is higher than the random number, the program should
display “Too high, try again.” If the user’s guess is lower than the random number,
the program should display “Too low, try again.” The program should use a loop that
repeats until the user correctly guesses the random number.

21. Random Number Guessing Game Enhancement
Enhance the program that you wrote for Programming Challenge 20 so it keeps a count
of the number of guesses that the user makes. When the user correctly guesses the random
number, the program should display the number of guesses.

22. Square Display
Write a program that asks the user for a positive integer no greater than 15. The program
should then display a square on the screen using the character ‘X’. The number
entered by the user will be the length of each side of the square. For example, if the
user enters 5, the program should display the following:
XXXXX
XXXXX
XXXXX
XXXXX
XXXXX
If the user enters 8, the program should display the following:
XXXXXXXX
XXXXXXXX
XXXXXXXX
XXXXXXXX
XXXXXXXX
XXXXXXXX
XXXXXXXX
XXXXXXXX

23. Pattern Displays
Write a program that uses a loop to display Pattern A below, followed by another loop
that displays Pattern B.
___________________________________
Pattern A       Pattern B
___________________________________
+               ++++++++++
++              +++++++++
+++             ++++++++
++++            +++++++
+++++           ++++++
++++++          +++++
+++++++         ++++
++++++++        +++
+++++++++       ++
++++++++++      +
___________________________________

24. Using Files—Numeric Processing
If you have downloaded this book’s source code from the companion Web site, you
will find a file named Random.txt in the Chapter 05 folder. (The companion Web
site is at www.pearsonhighered.com/gaddis .) This file contains a long list of random
numbers. Copy the file to your hard drive and then write a program that opens the file,
reads all the numbers from the file, and calculates the following:
A) The number of numbers in the file
B) The sum of all the numbers in the file (a running total)
C) The average of all the numbers in the file
The program should display the number of numbers found in the file, the sum of the
numbers, and the average of the numbers.

25. Using Files—Student Line Up
Modify the Student Line Up program described in Programming Challenge 14 so that
it gets the names from a file. Names should be read in until there is no more data to
read. If you have downloaded this book’s source code from the companion Web site,
you will find a file named LineUp.txt in the Chapter 05 folder. You can use this file to
test the program. (The companion Web site is at www.pearsonhighered.com/gaddis .)

26. Using Files—Savings Account Balance Modification
Modify the Savings Account Balance program described in Programming Challenge 16
so that it writes the final report to a file.
