
int* arrAllocate(int size)
{
    int* myArr = new int[size];
    for (int i = 0; i < size; i++)
        myArr[i] = NULL;
    return myArr;
}

void arrSelectSort(double* arr, int size)
{
    int startScan, minIndex;
    double minElement;

    for (startScan = 0; startScan < (size - 1); startScan++)
    {
        minIndex = startScan;
        minElement = arr[startScan];
      
        for (int index = startScan + 1; index < size; index++)
        {
            if (arr[index] < minElement)
            {
                minElement = arr[index];
                minIndex = index;
            }
        }
        arr[minIndex] = arr[startScan];
        arr[startScan] = minElement;

    }
}

void showArray(const double* arr, int size)
{
    for (int count = 0; count < size; count++)
        cout << *(arr+count) << " ";
    cout << endl;
}


double* testScore(int size)
{
    double* test = new double[size];
    cout << "Enter each test scores\n";

    for (int i = 0; i < size; i++) {
        cout << "Test #" << i + 1 << ": ";
        while (cin >> *(test + i) && *(test + i) < 0)
            cout << "No negative value. Enter again.\n";
    }
    return test;
}

double averageScore(double* arr, int size)
{
    double total = 0;
    for (int i = 0; i < size; i++)
        total += *(arr+i);

    double average = total / size;
    return average;
}

double averageScore2(double* arr, int size)
{
    double total = 0;
    int count = 0; //to store the drop lowest score so we can use it to substract from size
    for (int i = 0; i < size; i++) {
        if (*(arr + i) == 0)
            count++;
        total += *(arr + i);
    }

    double average = total / (size-1);
    return average;
}

void dropLowestScore(double* arr, int size)
{
    int i = 0;
    int temp = 0;
    double lowest = arr[i];
    for (i = 1; i < size; i++)
    {
        if (arr[i] < lowest) {
            lowest = arr[i];
            temp = i;
        }
    }
    //The lowest score we set it to 0
    arr[temp] = NULL;
}

int main()
{

1. Array Allocator
Write a function that dynamically allocates an array of integers. The function should
accept an integer argument indicating the number of elements to allocate. The function
should return a pointer to the array.

    int num;
    cout << "How many elements you would like to create for an array?\n";
    cin >> num;

    int* newArr = arrAllocate(num);

    for (int i = 0; i < num; i++)
        cout << *(newArr + i) << " ";

    delete[] newArr;

2. Test Scores #1
Write a program that dynamically allocates an array large enough to hold a userdefined
number of test scores. Once all the scores are entered, the array should be
passed to a function that sorts them in ascending order. Another function should be
called that calculates the average score. The program should display the sorted list of
scores and averages with appropriate headings. Use pointer notation rather than array
notation whenever possible.
Input Validation: Do not accept negative numbers for test scores.

    int numTest;

    cout << "How many test score? ";
    cin >> numTest;

    double* test = testScore(numTest);

    arrSelectSort(test, numTest);

    cout << "\nSorted test score ";
    showArray(test, numTest);

    double average = averageScore(test, numTest);

    cout << "The average score of " << numTest << " tests are: " << average << endl;

3. Drop Lowest Score
Modify Problem 2 above so the lowest test score is dropped. This score should not be
included in the calculation of the average.

    int numTest;

    cout << "How many test score? ";
    cin >> numTest;

    double* test = testScore(numTest);

    arrSelectSort(test, numTest);

    dropLowestScore(test, numTest);

    cout << "\nSorted test score ";
    showArray(test, numTest);

    double average = averageScore2(test, numTest);

    cout << "The average score of " << numTest << " tests are: " << average << endl;

4. Test Scores #2
Modify the program of Programming Challenge 2 to allow the user to enter name-score
pairs. For each student taking a test, the user types the student’s name followed by the
student’s integer test score. Modify the sorting function so it takes an array holding
the student names and an array holding the student test scores. When the sorted list
of scores is displayed, each student’s name should be displayed along with his or her
score. In stepping through the arrays, use pointers rather than array subscripts.

5. Pointer Rewrite
The following function uses reference variables as parameters. Rewrite the function so
it uses pointers instead of reference variables, and then demonstrate the function in a
complete program.
int doSomething(int &x, int &y)
{
int temp = x;
x = y * 10;
y = temp * 10;
return x + y;
}

6. Case Study Modification #1
Modify Program 9-19 (the United Cause case study program) so it can be used with
any set of donations. The program should dynamically allocate the donations array
and ask the user to input its values.

7. Case Study Modification #2
Modify Program 9-19 (the United Cause case study program) so the arrptr array is
sorted in descending order instead of ascending order.

8. Mode Function
In statistics, the mode of a set of values is the value that occurs most often or with the
greatest frequency. Write a function that accepts as arguments the following:
A) An array of integers
B) An integer that indicates the number of elements in the array
The function should determine the mode of the array. That is, it should determine
which value in the array occurs most often. The mode is the value the function should
return. If the array has no mode (none of the values occur more than once), the function
should return −1. (Assume the array will always contain nonnegative values.)
Demonstrate your pointer prowess by using pointer notation instead of array notation
in this function.

return 0;
}
