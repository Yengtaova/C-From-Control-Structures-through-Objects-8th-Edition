#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>
using namespace std;


template <typename T>
tuple<T, T> largest(const T num[], int size)
{
    int month =0;
    T largest = num[0];
    for(int i = 1 ; i < size; i++)
    {
        if(num[i] > largest){
            largest = num[i];
            month = i;
        }
    }
    return make_tuple(month, largest);
}

template<typename T>
tuple <T,T> smallest(const T num[], int size)
{
    int month = 0;
    T smallest = num[0];
    for(int i = 1 ; i < size; i++)
    {
        if(num[i] < smallest){
            smallest = num[i];
            month = i;
        }
    }
        
    return make_tuple(month, smallest);
}

template <typename T>
void inputValidate(T& value)
{
    while(cin >> value && value < 0)
        cout << "No negative value. Enter again: ";
}

//if we want to use range base for loop we need to pass the array with the size attach to it
//https://stackoverflow.com/questions/1461432/what-is-array-to-pointer-decay
void salsaReport(const string (&name)[5], const int (&soldAmount)[5], int size)
{
    for(int i = 0 ; i < size; i++)
    {
        cout << name[i] << ": " << soldAmount[i] << " jars.\n";
    }
    
    int totalSales = 0;
    for(auto amount : soldAmount)
        totalSales += amount;
    
    int s, h;
    double small, high;
    
    tie(s, small) = smallest(soldAmount, size);
    tie(h , high) = largest(soldAmount, size);
    
    cout << "Total jars sold is:" <<  totalSales
         << "\nThe highest selling is " << name[h] << " with " << high << " jars sold"
        << "\nThe lowest selling is " << name[s] << " with " << small << " jars sold\n";
}

template<typename  T>
void greaterNum(const T myArray[], int size, T n)
{
    for(int i = 0 ; i < size; i++)
    {
        if(myArray[i] > n)
            cout << myArray[i] << " ";
    }
}

void averageFoodAmount(double food[][5], int rows)
{
   
    double average[5];
    
    cout << setprecision(2) << fixed << showpoint;
    cout << "\nThe average amount of food eaten by whole family monkey per day.\n";
    for(int i = 0 ; i < 5; i++)
    {
        double total = 0;
        for(int j = 0 ; j < rows; j++)
        {
            total += food[j][i];
        }
        average[i] = total/ rows;
        cout << "Day " <<i+1 << ": " << average[i] << " lbs.\n";
    }
}

void leastAmount(double food[][5], int rows)
{
    double smallest = food[0][0];
    for(int i = 0 ; i < rows; i++)
    {
        for(int j = 0 ; j < 5; j++)
        {
            if(food[i][j] <= smallest)
                smallest = food[i][j];
        }
    }
    cout << "\nThe least amount of food eaten during the week by any monkey is: " << smallest << " lbs.\n";
}

void greatestAmount(double food[][5], int rows)
{
    double greatest = food[0][0];
    for(int i = 0 ; i < rows; i++)
    {
        for(int j = 0 ; j < 5; j++)
        {
            if(food[i][j] >= greatest)
                greatest = food[i][j];
        }
    }
    cout << "\nThe greatest amount of food eaten during the week by any monkey is: " << greatest << " lbs.\n";
}

void trackWeather(char weather[][30], int rows)
{
    int rainy = 0, cloudy = 0, sunny = 0;

    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < 30; j++)
        {
            if (weather[i][j] == 'R')
                rainy++;
            else if (weather[i][j] == 'C')
                cloudy++;
            else
                sunny++;
        }
    }

    cout << "There are " << rainy << " rainy days. "
        << "\nThere are " << cloudy << " cloudy days. "
        << "\nThere are " << sunny << " sunny days.\n";
}

void largestRainy(char weather[][30], int rows)
{
    vector<int>month;
    for (int i = 0; i < rows; i++)
    {
        int rainy = 0;
        for (int j = 0; j < 30; j++)
        {
            if (weather[i][j] == 'R')
                rainy++;
        }
        month.push_back(rainy);
    }

    cout << "\nMonth with the highest rainy days.\n";
    if (month[0] > month[1] && month[0] > month[2])
        cout << "June:" << month[0] << " day(s).\n";
    else if (month[1] > month[0] && month[1] > month[2])
        cout << "July:" << month[1] << " day(s).\n";
    else
        cout << "August:" << month[2] << " day(s).\n";
}

bool LoShuMagic(const int arr[][3], int rows)
{
    bool check = true;
    int sum;

    //check the rows part first
    for (int i = 0; i < rows; i++)
    {
        sum = 0;
        for (int j = 0; j < 3; j++)
        {
            sum += arr[i][j];
        }
        if (sum != 15)
            return false;
    }

    //check the column part
    for (int j = 0; j < 3; j++)
    {
        sum = 0;
        for (int i = 0; i < rows; i++)
        {
            sum += arr[j][i];
        }
        if (sum != 15)
            return false;
    }

    
    //check the diagonal part from top left to end right
    sum = 0; //reset the sum value
    for (int i = 0, j =0; i < rows; i++, j++)
    {
        sum += arr[i][j];
    }
    if (sum != 15)
        return false;

    //diagonal top right to end left
    sum = 0;
    for (int i = 0, j = 2; i < rows, j >=0; i++, j--)
    {
        sum += arr[i][j];
    }
    if (sum != 15)
        return false;

    return check;
}

void testReport(const char key[], const char answer[], int n)
{
    int count = 0;
    vector<int>incorrectAnswer;
    for (int i = 0; i < n; i++)
    {
        if (key[i] == answer[i])
            count++;
        else
            incorrectAnswer.push_back(i);
    }
    if (count >= 15)
        cout << "\nPassed.\n";
    else
        cout << "\nFailed.\n";

    cout << "The total number of corrected answers: " << count << endl;
    cout << "The total number of incorrected answers: " << n - count << endl;
    if (!incorrectAnswer.empty()) {
        cout << "Your incorrect answers are\n";

        for (auto a : incorrectAnswer) {
            cout << "Q" << a + 1 << ": " << answer[a] << " -----> corrected answer is " << key[a] << endl;
        }
    }
    
    //for question 11
    double correctPercentage = double(count) / n;
    cout << "The percentage of corrected answers " << correctPercentage;
    if (correctPercentage >= 0.7)
        cout << "\nPassed";
    else
        cout << "\nFailed";
}

void averageGrade(const string name[], const double score[][4], char grade[], int n)
{
    double total, average;
    for (int i = 0; i < n; i++)
    {
        total = average = 0;
        cout << "Average test score for " << name[i] << " is ";
        for (int j = 0; j < 4; j++) {
            total += score[i][j];
        }
        average = total / 4;
        cout << average << endl;

        if (average >= 90)
            grade[i] = 'A';
        else if (average >= 80)
            grade[i] = 'B';
        else if (average >= 70)
            grade[i] = 'C';
        else if (average >= 60)
            grade[i] = 'D';
        else
            grade[i] = 'F';
        cout << "Grade " << grade[i] << endl;
    }
}

bool testPIN(vector<int> CP, vector<int> DP)
{
    for (int index = 0; index < CP.size(); index++)
    {
        if (CP[index] != DP[index])
            return false;
    }
    return true;
}

void displayTicTac(const char tt[][3], int rows)
{
    for (int i = 0; i < rows; i++)
    {
        cout << "|";
        for (int j = 0; j < 3; j++)
        {
            cout << tt[i][j] << "|";
        }
        cout << endl;
    }
}

bool checkTaken(const char tt[][3], int rows, int cols)
{
    bool taken = true;
    if (tt[rows-1][cols-1] != '*')
        taken = false;
    return taken;
}

bool checkWin(const char tt[][3], int rows, int cols)
{
    //bool check = false;
    int countX, countO;
    //rows pattern
    for (int i = 0; i < rows; i++)
    {
        countX = countO = 0;
        for (int j = 0; j < cols; j++)
        {
            if (tt[i][j] == 'X')
                countX++;
            else if (tt[i][j] == 'O')
                countO++;
        }
        if (countX == 3 || countO == 3)
            return true;

    }
    //columns pattern
    for (int j = 0; j < cols; j++)
    {
        countX = countO = 0;
        for (int i = 0; i < rows; i++)
        {
            if (tt[i][j] == 'X')
                countX++;
            else if (tt[i][j] == 'O')
                countO++;
        }
        if (countX == 3 || countO == 3)
            return true;
    }
    //diagonal pattern top left to right end
    countX = countO = 0;
    for (int i = 0; i < rows; i++)
    {
        if (tt[i][i] == 'X')
            countX++;
        else if (tt[i][i] == 'O')
            countO++;
    }
    if (countX == 3 || countO == 3)
        return true;
    //diagonal pattern top right to end left
    countX = countO = 0;
    for (int i = 0, j = 2; i < rows, j >= 0; i++, j--)
    {
        if (tt[i][j] == 'X')
            countX++;
        else if (tt[i][j] == 'O')
            countO++;
    }
    if (countX == 3 || countO == 3)
        return true;

    return false;
}

bool checkDraw(char tt[][3], int rows)
{
    bool draw;
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            if (tt[i][j] != '*')
                draw = true;
            else
                draw = false;
        }
    }
    return draw;
}
void input(char tt[][3], int& r, int& c) 
{
    cout << "Row: ";
    cin >> r;

    cout << "Column: ";
    cin >> c;

    while (!checkTaken(tt, r, c))
    {
        cout << "The spot is already taken. Enter again.\n";
        cout << "Row: ";
        cin >> r;
        cout << "Column: ";
        cin >> c;
    }

}

void takeTurn(char tt[][3], int rows)
{
    int row, col;
    bool win;
    int boardSpace = 0;
    do {
       

        cout << "\nPlayer 1\n";

        input(tt, row, col);
        tt[row - 1][col - 1] = 'X';
        boardSpace++;
        displayTicTac(tt, rows);
        win = checkWin(tt, row, col);
        if (boardSpace == 9)
        {
            cout << "\nDraw\n";
            break;
        }
        if (win) {
            cout << "\nPlayer 1 win the game.\n";
            break;
        }

        cout << "\nPlayer 2\n";

        input(tt, row, col);
        tt[row - 1][col - 1] = 'O';
        boardSpace++;
        displayTicTac(tt, rows);
        win = checkWin(tt, row, col);
        if (win) {
            cout << "\nPlayer 2 win the game.\n";
            break;
        }

        if (boardSpace == 9)
        {
            cout << "\nDraw\n";
            break;;
        }


    } while (!win);
}

int getTotal(const int data[][5], int rows)
{
    int total = 0;
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            total += data[i][j];
        }
    }
    return total;
}

double getAverage(const int data[][5], int rows)
{
    double average = 0;
    int total = 0;
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            total += data[i][j];
        }
    }
    average = double(total) / 20;
    return average;
}

int getRowTotal(const int data[][5], int row)
{
    int total = 0;
    for (int i = row, j = 0; j < 5; j++)
        total += data[i][j];
    return total;
}

int getColumnTotal(const int data[][5], int col)
{
    int total = 0;
    for (int j = col, i = 0; i < 5; i++)
    {
        total += data[i][j];
    }
    return total;
}

int getHighestInRow(const int data[][5], int row)
{
    int highest = data[row][0];
    for (int i = row, j = 0; j < 5; j++)
    {
        if (data[i][j] >= highest)
            highest = data[i][j];
    }
    return highest;    
}

int getLowestInRow(const int data[][5], int row)
{

    int lowest = data[row][0];
    for (int i = row, j = 0; j < 5; j++)
    {
        if (data[i][j] <= lowest)
            lowest = data[i][j];
    }
    return lowest;
}

//******************************************************************************************************
int main(int argc, const char * argv[]) {

1. Largest/Smallest Array Values
Write a program that lets the user enter 10 values into an array. The program should
then display the largest and smallest values stored in the array.

int numArray[10];
    int large, small;
    cout << "Enter 10 values and program will display the smallest and largest number among them.\n";
    for(int i = 0 ; i < 10; i++)
    {
        cout << "Number #" << i+1 << ":";
        cin >> numArray[0];
    }
    
    large = largest(numArray, 10);
    small = smallest(numArray,10);
    
    cout << "\nThe largest number is " << large
         << "\nThe smallest number is " << small << endl;

 2. Rainfall Statistics
Write a program that lets the user enter the total rainfall for each of 12 months into
an array of doubles. The program should calculate and display the total rainfall for
the year, the average monthly rainfall, and the months with the highest and lowest
amounts.
Input Validation: Do not accept negative numbers for monthly rainfall figures.

    const int MONTH = 12;
    double rainfall[MONTH];
    string month[MONTH] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    
    cout << "Enter the amount of rainfall for each month\n";
    for(int i = 0 ; i <MONTH; i++)
    {
        cout << month[i] << ": ";
        inputValidate(rainfall[i]);
    }
    
    double total = 0, average = 0;
    for(auto val: rainfall)
        total += val;
    
    average = total/MONTH;
    
    double large, small;
    int lMonth, sMonth;
    
    tie(sMonth, small) = smallest(rainfall, MONTH);
    tie(lMonth, large) = largest(rainfall, MONTH);
    
    cout << setprecision(2) << showpoint << fixed
         << "\nTotal rainfall is " << total << " inches "
         << "\nAverage monthly rainfall is " << average << " inches"
         << "\nLowest month of rainfall is " << small << " inches on " << month[sMonth]
         << "\nHighest month of rainfall is "  << large << " inches on " << month[lMonth] << endl;

 3. Chips and Salsa
Write a program that lets a maker of chips and salsa keep track of sales for five different types of salsa: mild, medium, sweet, hot, and zesty. The program should use two
parallel 5-element arrays: an array of strings that holds the five salsa names and
an array of integers that holds the number of jars sold during the past month for each
salsa type. The salsa names should be stored using an initialization list at the time the
name array is created. The program should prompt the user to enter the number of jars
sold for each type. Once this sales data has been entered, the program should produce
a report that displays sales for each salsa type, total sales, and the names of the highest
selling and lowest selling products.
Input Validation: Do not accept negative values for number of jars sold.


    const int NUM = 5;
    string salsaName[NUM] = {"mild", "medium", "sweet", "hot", "zesty"};
    int salsaSold[NUM];
    
    for(int i = 0 ; i < NUM; i++)
    {
        cout << "Number of jars sold for " << salsaName[i] << " salsa ";
        inputValidate(salsaSold[i]);
    }
    
    salsaReport(salsaName, salsaSold, NUM);

4. Larger Than n
In a program, write a function that accepts three arguments: an array, the size of the
array, and a number n. Assume that the array contains integers. The function should
display all of the numbers in the array that are greater than the number n .

    const int NUM = 50;
    int arrNum[NUM];
    int n, randNum;
    
    for(auto &num : arrNum){
        randNum = rand()%50 +1;
        num = randNum;
    }
    
    cout << "Enter the number you want to compare: ";
    cin >> n;
    
    greaterNum(arrNum, NUM, n);

5. Monkey Business
A local zoo wants to keep track of how many pounds of food each of its three monkeys
eats each day during a typical week. Write a program that stores this information in a
two-dimensional 3 × 5 array, where each row represents a different monkey and each
column represents a different day of the week. The program should first have the user
input the data for each monkey. Then it should create a report that includes the following information:
• Average amount of food eaten per day by the whole family of monkeys.
• The least amount of food eaten during the week by any one monkey.
• The greatest amount of food eaten during the week by any one monkey.
Input Validation: Do not accept negative numbers for pounds of food eaten.

    const int ROWS = 3,
              COLS = 5;
    double monkeyInfo[ROWS][COLS];
    
    cout << "Enter the food information for each monkey\n";
    for(int i = 0; i < ROWS; i++)
    {
        cout << "\nMonkey " << i+1 << "\n";
        for(int j = 0; j < COLS; j++){
            cout << "Day " << j+1 <<": ";
            cin >> monkeyInfo[i][j];
        }
    }
    
    averageFoodAmount(monkeyInfo, ROWS);
    leastAmount(monkeyInfo, ROWS);
    greatestAmount(monkeyInfo, ROWS);

6. Rain or Shine
An amateur meteorologist wants to keep track of weather conditions during the
past year’s three-month summer season and has designated each day as either rainy
(‘R’), cloudy (‘C’), or sunny (‘S’). Write a program that stores this information in a
3 × 30 array of characters, where the row indicates the month (0 = June, 1 = July,
2 = August) and the column indicates the day of the month. Note that data are not
being collected for the 31st of any month. The program should begin by reading the
weather data in from a file. Then it should create a report that displays, for each
month and for the whole three-month period, how many days were rainy, how many
were cloudy, and how many were sunny. It should also report which of the three
months had the largest number of rainy days. Data for the program can be found in
the RainOrShine.txt file.

    const int month = 3,
              day = 30;
    char weather[month][day];

    //month: 0 = june,  1 = july,   2 August

    ifstream inputFile("RainOrShine.txt");

    if (inputFile.fail())
        cout << "File can't be opened.\n";
    else {
        for (int i = 0; i < month; i++)
        {
            for (int j = 0; j < day; j++) {
                inputFile >> weather[i][j];
            }
        }
    }

    inputFile.close();

    trackWeather(weather, month);
    largestRainy(weather, month);

 7. Number Analysis Program
Write a program that asks the user for a file name. Assume the file contains a series of
numbers, each written on a separate line. The program should read the contents of the
file into an array and then display the following data:
• The lowest number in the array
• The highest number in the array
• The total of the numbers in the array
• The average of the numbers in the array
If you have downloaded this book’s source code from the companion Web site, you
will find a file named numbers.txt in the Chapter 07folder. You can use the file to
test the program. (The companion Web site is at www.pearsonhighered.com/gaddis .) 

    vector<int> number;
    int temp;

    ifstream  inputFile("numbers.txt");
    if (inputFile.fail())
        cout << "Error. Can't open the file.\n";
    else {
        while (!inputFile.eof()) {
            inputFile >> temp;
            number.push_back(temp);
        }
    }
    int total = 0;
    for (auto point : number)
        total += point;

    //I will use STL to make it quick to find highest and lowest value
    int highest = *max_element(number.begin(), number.end());
    int lowest = *min_element(number.begin(), number.end());

    cout << "\nThe lowest number in the array: " << lowest
         << "\nThe highest number in the array: " << highest
         <<"\nThe total of the numbers in the array: " << number.size()
         << "\nThe average of the numbers in the array: " << static_cast<double>(total) / number.size();
         
8. Lo Shu Magic Square
The Lo Shu Magic Square is a grid with 3 rows and 3 columns shown in Figure 7-19 .
The Lo Shu Magic Square has the following properties:
• The grid contains the numbers 1 through 9 exactly.
• The sum of each row, each column, and each diagonal all add up to the same
number. This is shown in Figure 7-20 .
In a program you can simulate a magic square using a two-dimensional array. Write a
function that accepts a two-dimensional array as an argument, and determines whether
the array is a Lo Shu Magic Square. Test the function in a program. 

 int square[3][3] = { 4,9,2,
                      3,5,7,
                      8,1,6 };

    if (LoShuMagic(square, 3))
        cout << "It is a Lo Shu Magic Square.\n";
    else
        cout << "No, it is not a Lo Shu Magic Square.\n";


9. Payroll
Write a program that uses the following arrays:
• empId: an array of seven long integers to hold employee identification numbers. The
array should be initialized with the following numbers:
5658845 4520125 7895122 8777541
8451277 1302850 7580489
• hours: an array of seven integers to hold the number of hours worked by each
employee
• payRate: an array of seven doubles to hold each employee’s hourly pay rate
• wages: an array of seven doubles to hold each employee’s gross wages
The program should relate the data in each array through the subscripts. For example,
the number in element 0 of the hours array should be the number of hours worked by
the employee whose identification number is stored in element 0 of the empId array.
That same employee’s pay rate should be stored in element 0 of the payRate array.
The program should display each employee number and ask the user to enter that
employee’s hours and pay rate. It should then calculate the gross wages for that
employee (hours times pay rate) and store them in the wages array. After the data has
been entered for all the employees, the program should display each employee’s identification number and gross wages.
Input Validation: Do not accept negative values for hours or numbers less than 15.00
for pay rate.

    const int NUM = 7;
    long int empId[NUM] = { 5658845, 4520125, 7895122, 8777541,
                         8451277, 1302850, 7580489 };
    int hours[NUM];
    double payRate[NUM];
    double wages[NUM];

    for (int i = 0; i < NUM; i++)
    {
        cout << "\nEmployee id " << empId[i] << ": ";
        cout << "\nWorking hour: ";
        cin >> hours[i];
        cout << "Pay rate: ";
        cin >> payRate[i];
        wages[i] = hours[i] * payRate[i];
    }

    //Display the data
    for (int i = 0; i < NUM; i++)
    {
        cout << "\nEmployee id " << empId[i]
            << "\nGross pay: $" << wages[i] << endl;
    }


10. Driver’s License Exam
The local Driver’s License Office has asked you to write a program that grades the written portion of the driver’s license exam. The exam has 20 multiple choice questions.
Here are the correct answers:
1. A        6. B      11. A     16. C
2. D        7. A      12. C     17. C
3. B        8. B      13. D     18. A
4. B        9. C      14. B     19. D
5. C        10. D     15. D     20. B

Your program should store the correct answers shown above in an array. It should ask
the user to enter the student’s answers for each of the 20 questions, and the answers
should be stored in another array. After the student’s answers have been entered, the
program should display a message indicating whether the student passed or failed the
exam. (A student must correctly answer 15 of the 20 questions to pass the exam.) It
should then display the total number of correctly answered questions, the total number
of incorrectly answered questions, and a list showing the question numbers of the
incorrectly answered questions.
Input Validation: Only accept the letters A, B, C, or D as answers.

    const int NUM = 20;
    char keyAnswers[NUM] = { 'A', 'D', 'B', 'B', 'C', 'B', 'A', 'B', 'C', 'D',
                         'A','C','D', 'B','D','C', 'C', 'A', 'D', 'B' };
    char answers[NUM];

    cout << "Enter your answers for each question. Accept letter 'A', 'B', 'C', 'D'\n";
    
    char input;
    for (int i = 0; i < NUM; i++)
    {
        cout << "Q" << i+1 << " ";
        cin >> input;
        while (toupper(input) != 'A' && toupper(input) != 'B' && toupper(input) != 'C' && toupper(input) != 'D') {
            cout << "Invalid input. Enter again.\n";
            cin >> input;
        }
        input = toupper(input); // just to make sure
        answers[i] = input;
    }

    testReport(keyAnswers, answers, NUM);

11. Exam Grader
One of your professors has asked you to write a program to grade her final exams,
which consist of only 20 multiple-choice questions. Each question has one of four possible
answers: A, B, C, or D. The file CorrectAnswers.txt contains the correct answers
for all of the questions, with each answer written on a separate line. The first line
contains the answer to the first question, the second line contains the answer to the
second question, and so forth. (Download the book’s source code from the companion
Web site at www.pearsonhighered.com/gaddis . You will find the file in the Chapter 07
folder.)
Write a program that reads the contents of the CorrectAnswers.txt file into a char
array, and then reads the contents of another file, containing a student’s answers, into a
second char array. (You can use the file StudentAnswers.txt for testing purposes. This
file is also in the Chapter 07 source code folder, available on the book’s companion
Web site.) The program should determine the number of questions that the student
missed and then display the following:
• A list of the questions missed by the student, showing the correct answer and the
incorrect answer provided by the student for each missed question
• The total number of questions missed
• The percentage of questions answered correctly. This can be calculated as
Correctly Answered Questions ÷ Total Number of Questions
• If the percentage of correctly answered questions is 70% or greater, the program
should indicate that the student passed the exam. Otherwise, it should indicate that
the student failed the exam.

    const int size = 20;
    char correctedAnswer[size];
    char studentAns[size];

    ifstream inputFile("CorrectAnswers.txt");
    if (inputFile.fail())
        cout << "Can't open the file.\n";
    else {
        int i = 0;
        while (!inputFile.eof() && i < 20) {
            inputFile >> correctedAnswer[i];
            i++;
        }
    }
    inputFile.close();

    ifstream inputFile2("StudentAnswers.txt");
    if (inputFile2.fail())
        cout << "Can't open the file.\n";
    else {
        int i = 0;
        while (!inputFile2.eof() && i < 20) {
            inputFile2 >> studentAns[i];
            i++;
        }
    }
    inputFile2.close();

    testReport(correctedAnswer, studentAns, 20);

12. Grade Book
A teacher has five students who have taken four tests. The teacher uses the following
grading scale to assign a letter grade to a student, based on the average of his or her
four test scores.

Test Score          Letter Grade
90–100                   A
80–89                    B
70–79                    C
60–69                    D
0–59                     F

Write a program that uses an array of string objects to hold the five student names,
an array of five characters to hold the five students’ letter grades, and five arrays of
four double s to hold each student’s set of test scores.
The program should allow the user to enter each student’s name and his or her four
test scores. It should then calculate and display each student’s average test score and a
letter grade based on the average.
Input Validation: Do not accept test scores less than 0 or greater than 100.

    const int NUM = 5,
              NUMSCORE = 4;
    string name[NUM];
    char letterGrade[NUM];
    double score[NUM][NUMSCORE];

    cout << "Enter the name for each student\n";
    for (int i = 0; i < NUM; i++)
    {
        cout << "Student " << i + 1 << ": ";
        cin.ignore();
        getline(cin, name[i]);
        for (int j = 0; j < NUMSCORE; j++) {
            cout << "Test score #" << j + 1 << ": ";
            cin >> score[i][j];
        }
        cout << endl;
    }

    averageGrade(name, score, letterGrade, NUM);

13. Grade Book Modification
Modify the grade book application in Programming Challenge 13 so it drops each student’s
lowest score when determining the test score averages and letter grades.

14. Lottery Application
Write a program that simulates a lottery. The program should have an array of five
integers named lottery and should generate a random number in the range of 0
through 9 for each element in the array. The user should enter five digits, which should
be stored in an integer array named user . The program is to compare the corresponding
elements in the two arrays and keep a count of the digits that match. For example,
the following shows the lottery array and the user array with sample numbers stored
in each. There are two matching digits (elements 2 and 4).

lottery array:
7 4 9 1 3
user array:
4 2 9 7 3

The program should display the random numbers stored in the lottery array and the
number of matching digits. If all of the digits match, display a message proclaiming the
user as a grand prize winner.

    const int num = 5;
    int lottery[num];
    int user[num];


    srand(time(0));
    
    //lottery array
    for (auto& a : lottery)
    {
        int random = rand() % 9 + 1;
        a = random;
    }

    //for user
    cout << "Enter your 5 digits.\n";
    for (auto& b : user)
        cin >> b;

    //check for winning
    bool check = true;
    for (int i = 0; i < num; i++)
    {
        if (lottery[i] != user[i]) {
            check = false;
            break;
        }
    }
    if (check)
        cout << "Congrats. You win the grand prize.\n";
    else
        cout << "Better luck next time.\n";

    //print the resutl
    cout << "Lottery\n";
    for (int i = 0; i < num; i++)
        cout << lottery[i] << " ";
    cout << "\nUser\n";
    for (int i = 0; i < num; i++)
        cout << user[i] << " ";

15. vector Modification
Modify the National Commerce Bank case study presented in Program 7-23 so pin1 ,
pin2 , and pin3 are vector s instead of arrays. You must also modify the testPIN
function to accept a vector instead of an array.

    vector<int> pin1{ 2,4,1,8,7,9,0 };
    vector<int> pin2{ 2,4,6,8,7,9,0 };
    vector<int> pin3{ 1,2,3,4,5,6,7 };

    if (testPIN(pin1, pin2))
        cout << "ERROR: pin1 and pin2 report to be the same.\n";
    else
        cout << "SUCCCESS: pin1 and pin2 are different.\n";

    if (testPIN(pin1, pin3))
        cout << "ERROR: pin1 and pin3 report to be the same.\n";
    else
        cout << "SUCCCESS: pin1 and pin3 are different.\n";

    if (testPIN(pin1, pin1))
        cout << "SUCCESS: pin1 and pin1 report to be the same.\n";
    else
        cout << "ERROR: pin1 and pin1 report to be different.\n";

16. World Series Champions
If you have downloaded this book’s source code from the companion Web site, you
will find the following files in this chapter’s folder:
• Teams.txt—This file contains a list of several Major League baseball teams in alphabetical
order. Each team listed in the file has won the World Series at least once.
• WorldSeriesWinners.txt—This file contains a chronological list of the World Series’
winning teams from 1903 to 2012. (The first line in the file is the name of the team
that won in 1903, and the last line is the name of the team that won in 2012. Note
that the World Series was not played in 1904 or 1994.)
Write a program that displays the contents of the Teams.txt file on the screen and
prompts the user to enter the name of one of the teams. The program should then display
the number of times that team has won the World Series in the time period from
1903 to 2012.

string teamName;
    int count = 0;
    ifstream inputFile("Teams.txt");
    if (inputFile.fail())
        cout << "Error. Can't load the file.\n";
    else {
        while (!inputFile.eof()) {
            getline(inputFile, teamName);
            cout << teamName << endl;
            count++;
        }

    }
    inputFile.close();

    int winCount = 0;
    cout << "\nEnter the name of team you see in the list above to check how many times they won the WORLD SERIES\n";
    getline(cin, teamName);

    string temp;
    ifstream inputFile2("WorldSeriesWinners.txt");
    if (inputFile2.fail())
        cout << "Error. Can't load the file.\n";
    else {
        while (!inputFile2.eof()) {
            getline(inputFile2, temp);
            if (teamName == temp)
                winCount++;
        }
    }
    inputFile2.close();

    cout << teamName << " win " << winCount << " times.\n";

17. Name Search
If you have downloaded this book’s source code from the companion Web site, you
will find the following files in this chapter’s folder:
• GirlNames.txt—This file contains a list of the 200 most popular names given to girls
born in the United States from 2000 to 2009.
• BoyNames.txt—This file contains a list of the 200 most popular names given to boys
born in the United States from 2000 to 2009.
Write a program that reads the contents of the two files into two separate arrays or
vector s. The user should be able to enter a boy’s name, a girl’s name, or both, and
the application should display messages indicating whether the names were among the
most popular.

    vector<string>boys;
    vector<string>girls;
    string temp;

    ifstream inputFile("GirlNames.txt");
    if (inputFile.fail())
        cout << "Error. Can't read the file.\n";
    else
    {
        while (!inputFile.eof()) {
            getline(inputFile, temp);
            girls.push_back(temp);
        }
    }
    inputFile.close();

    ifstream inputFile2("BoyNames.txt");
    if (inputFile2.fail())
        cout << "Error. Can't read the file.\n";
    else
    {
        while (!inputFile2.eof()) {
            getline(inputFile2, temp);
            boys.push_back(temp);
        }
    }
    inputFile2.close();

    bool right = false;
    cout << "Enter your name to see if it is one of the popular name.\n";
    getline(cin, temp);

    for (int i = 0; i < boys.size(); i++)
    {
        if (temp == boys[i] || temp == girls[i])
            right = true;     
    }
   
    if(right)
        cout << "Your name is one of the popular names.\n";
    else
        cout << "No. It is not a popular name.\n";
        
18. Tic-Tac-Toe Game
Write a program that allows two players to play a game of tic-tac-toe. Use a twodimensional
char array with three rows and three columns as the game board. Each
element of the array should be initialized with an asterisk (*). The program should run
a loop that
• Displays the contents of the board array
• Allows player 1 to select a location on the board for an X. The program should ask
the user to enter the row and column number.
• Allows player 2 to select a location on the board for an O. The program should ask
the user to enter the row and column number.
• Determines whether a player has won, or a tie has occurred. If a player has won,
the program should declare that player the winner and end. If a tie has occurred, the
program should say so and end.
Player 1 wins when there are three Xs in a row on the game board. The Xs can appear
in a row, in a column, or diagonally across the board. A tie occurs when all of the
locations on the board are full, but there is no winner.

    const int ROWS = 3,
              COLS = 3;
    char tictac[ROWS][COLS] = { '*', '*', '*', 
                                '*', '*', '*', 
                                '*', '*', '*' };

    displayTicTac(tictac, ROWS);

    takeTurn(tictac, ROWS);
    
19. 2D Array Operations
Write a program that creates a two-dimensional array initialized with test data. Use any
data type you wish. The program should have the following functions:
• getTotal . This function should accept a two-dimensional array as its argument and
return the total of all the values in the array.
• getAverage . This function should accept a two-dimensional array as its argument
and return the average of all the values in the array.
• getRowTotal . This function should accept a two-dimensional array as its first argument
and an integer as its second argument. The second argument should be the
subscript of a row in the array. The function should return the total of the values in
the specified row.
• getColumnTotal . This function should accept a two-dimensional array as its first
argument and an integer as its second argument. The second argument should be the
subscript of a column in the array. The function should return the total of the values
in the specified column.
• getHighestInRow . This function should accept a two-dimensional array as its first
argument and an integer as its second argument. The second argument should be the
subscript of a row in the array. The function should return the highest value in the
specified row of the array.
• getLowestInRow . This function should accept a two-dimensional array as its first
argument and an integer as its second argument. The second argument should be the
subscript of a row in the array. The function should return the lowest value in the
specified row of the array.
Demonstrate each of the functions in this program.


    const int ROWS = 5,
              COLS = 5;
    int data[ROWS][COLS] = { 1 ,5, 3, 2, 10, 
                            12, 15, 20, 25, 30,
                            33, 50, 12, 32, 4, 
                            7, 9, 10, 44, 32};

    cout << getTotal(data, ROWS) << endl;
    cout << getRowTotal(data, 1) << endl;
    cout << getColumnTotal(data, 1) << endl;
    cout << getLowestInRow(data, 2) << endl;
    cout << getHighestInRow(data, 3) << endl;
    
Group Project
20. Theater Seating
This program should be designed and written by a team of students. Here are some
suggestions:
• One student should design function main , which will call the other functions in the
program. The remainder of the functions will be designed by other members of the
team.
• The requirements of the program should be analyzed so each student is given about
the same work load.
• The parameters and return types of each function should be decided in advance.
• The program can be implemented as a multi-file program, or all the functions can
be cut and pasted into the main file.

Here is the assignment: Write a program that can be used by a small theater to sell
tickets for performances. The theater’s auditorium has 15 rows of seats, with 30 seats
in each row. The program should display a screen that shows which seats are available
and which are taken. For example, the following screen shows a chart depicting each
seat in the theater. Seats that are taken are represented by an * symbol, and seats that
are available are represented by a # symbol:
Seats

      123456789012345678901234567890
Row 1 ***###***###*########*****####
Row 2 ####*************####*******##
Row 3 **###**********########****###
Row 4 **######**************##******
Row 5 ********#####*********########
Row 6 ##############************####
Row 7 #######************###########
Row 8 ************##****############
Row 9 #########*****############****
Row 10 #####*************############
Row 11 #**********#################**
Row 12 #############********########*
Row 13 ###***********########**######
Row 14 ##############################
Row 15 ##############################

Here is a list of tasks this program must perform:
• When the program begins, it should ask the user to enter the seat prices for each row.
The prices can be stored in a separate array. (Alternatively, the prices may be read
from a file.)
• Once the prices are entered, the program should display a seating chart similar to
the one shown above. The user may enter the row and seat numbers for tickets being
sold. Every time a ticket or group of tickets is purchased, the program should display
the total ticket prices and update the seating chart.
• The program should keep a total of all ticket sales. The user should be given an
option of viewing this amount.
• The program should also give the user an option to see a list of how many seats
have been sold, how many seats are available in each row, and how many seats are
available in the entire auditorium.
Input Validation: When tickets are being sold, do not accept row or seat numbers that
do not exist. When someone requests a particular seat, the program should make sure
that seat is available before it is sold.

return 0;
}
